{
	"swagger": "2.0",
	"info": {
		"description": "REST-ful API used to communicate with the Skipodium backend.",
		"version": "1.0.0",
		"title": "Skipodium API",
		"contact": {
			"name": "Blue Brick API Team",
			"url": "",
			"email": "adam.domagalski@blue-brick.com"
		}
	},
	"tags": [
		{
			"name": "Default"
		},
		{
			"name": "Schools"
		},
		{
			"name": "Messages"
		},
		{
			"name": "Users"
		},
		{
			"name": "Lessons"
		},
		{
			"name": "Payments"
		},
		{
			"name": "Bundles"
		},
		{
			"name": "Generators"
		}
	],
	"paths": {
		"/bundle": {
			"post": {
				"tags": [
					"Default"
				],
				"summary": "Adds a new bundle",
				"description": "Adds a new bundle",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Bundle"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"405": {
						"description": "Method not allowed."
					}
				}
			}
		},
		"/bundle/{bundleId}": {
			"get": {
				"tags": [
					"Default"
				],
				"summary": "Gets a bundle by ID",
				"description": "Gets a bundle by ID",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "bundleId",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Bundle"
						}
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					}
				}
			},
			"put": {
				"tags": [
					"Default"
				],
				"summary": "Modifies an existing bundle",
				"description": "Modifies an existing bundle",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "bundleId",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Bundle"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					},
					"405": {
						"description": "Method not allowed."
					}
				}
			},
			"delete": {
				"tags": [
					"Default"
				],
				"summary": "Deletes a bundle",
				"description": "Deletes a bundle",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "bundleId",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					}
				}
			}
		},
		"/bundle/{bundleId}/lesson": {
			"post": {
				"tags": [
					"Default"
				],
				"summary": "Adds a new lesson to the bundle",
				"description": "Adds a new lesson to the bundle",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "bundleId",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Lesson"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"405": {
						"description": "Method not allowed."
					}
				}
			}
		},
		"/bundle/{bundleId}/lesson/{lessonId}": {
			"delete": {
				"tags": [
					"Default"
				],
				"summary": "Deletes a lesson from a bundle",
				"description": "Deletes a lesson from a bundle",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "bundleId",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "lessonId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The lesson has been removed from the bundle."
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					}
				}
			}
		},
		"/feedback": {
			"get": {
				"tags": [
					"Messages"
				],
				"summary": "Get a feedback by parameters",
				"description": "Get a feedback by parameters",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "schoolId",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "lessonId",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "senderUserId",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "receiverUserId",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Feedback"
						}
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					}
				}
			},
			"post": {
				"tags": [
					"Messages"
				],
				"summary": "Adds new feedback to db",
				"description": "Adds new feedback to db",
				"consumes": [],
				"produces": [],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"405": {
						"description": "Method not allowed."
					}
				}
			}
		},
		"/generator": {
			"post": {
				"tags": [
					"Generators"
				],
				"summary": "Creates a new generator",
				"description": "Creates a new generator",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Generator"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"405": {
						"description": "Method not allowed."
					}
				}
			}
		},
		"/generator/{generatorId}": {
			"get": {
				"tags": [
					"Generators"
				],
				"summary": "Gets a generator by ID",
				"description": "Gets a generator by ID",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "generatorId",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					}
				}
			},
			"put": {
				"tags": [
					"Generators"
				],
				"summary": "Edits an existing generator",
				"description": "Edits an existing generator",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "generatorId",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Generator"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "Error 400"
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"404": {
						"description": "Error 404"
					},
					"405": {
						"description": "Method not allowed."
					}
				}
			},
			"delete": {
				"tags": [
					"Generators"
				],
				"summary": "Deletes a generator",
				"description": "Deletes a generator",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "generatorId",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					}
				}
			}
		},
		"/lesson": {
			"get": {
				"tags": [
					"Default"
				],
				"summary": "Gets lessons by parameters",
				"description": "Gets lessons by parameters",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "maxPrice",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "bookingType",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "schoolId",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "instructorId",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "speciality",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "level",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "meetingPoint",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "dateFrom",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "dateTo",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "clientSource",
						"in": "query",
						"description": "Skipodium user, manually booked by school, white label etc",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "booked",
						"in": "query",
						"description": "Whether it's already booked or not",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "generatorId",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "bundled",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "single",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Lesson"
						}
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"404": {
						"description": "No lesson with given matching the provided parameters was found."
					}
				}
			},
			"post": {
				"tags": [
					"Default"
				],
				"summary": "Creates a new lesson",
				"description": "Creates a new lesson",
				"consumes": [],
				"produces": [],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"405": {
						"description": "Method not allowed."
					}
				}
			}
		},
		"/lesson/{lessonId}": {
			"get": {
				"tags": [
					"Default"
				],
				"summary": "Gets a lesson by ID",
				"description": "Gets a lesson by ID",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "lessonId",
						"in": "path",
						"description": "ID of the lesson to work with.",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Lesson"
						}
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "You do not have permission to perform this operation"
					},
					"404": {
						"description": "No lesson with the specified id was found"
					}
				}
			},
			"put": {
				"tags": [
					"Default"
				],
				"summary": "Modifies an existing lesson",
				"description": "Modifies an existing lesson",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "lessonId",
						"in": "path",
						"description": "ID of the lesson to work with.",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Lesson"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The id of the lesson to be modified - this parameter IS mandatory.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "bookingType",
						"in": "query",
						"description": "What kind of booking type should this lesson have.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "bundleId",
						"in": "query",
						"description": "The id of the bundle this lesson should be part of. Empty  for removing from a bundle.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "comment",
						"in": "query",
						"description": "Modify the comment of a lesson",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "discount",
						"in": "query",
						"description": "Modify the discount applicable for this lesson (if present must be >= 0)",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "generatorId",
						"in": "query",
						"description": "The id of the generator owning this lesson, if a lesson is edited without specifying this parameter than it will be set to null.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "hourFrom",
						"in": "query",
						"description": "Starting hour of this lesson, must be less than hourTo",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "hourTo",
						"in": "query",
						"description": "Ending hour of this lesson, must be more than hourFrom",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "instructorBonusFlag",
						"in": "query",
						"description": "Does this lesson provide a bonus for the instructor",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "instructorId",
						"in": "query",
						"description": "The id of the new instructor (null for unassigned). If you only wish to modify the instructor assignment use /lesson{lessonId}/assignment",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "level",
						"in": "query",
						"description": "The levels of this lesson",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "maxAge",
						"in": "query",
						"description": "The max age for participants",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "maxParticipants",
						"in": "query",
						"description": "The maximum amount of participants",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "meetingPoint",
						"in": "query",
						"description": "The meeting point of this lesson",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "minAge",
						"in": "query",
						"description": "Minimal age for this lesson",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "minParticipants",
						"in": "query",
						"description": "Minimal number of participants for the lesson to take place",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "The name of the lesson",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "participants",
						"in": "query",
						"description": "list of id's of users participating in this lesson. If this is the only value you would like to modify please use /lesson{lessonId}/participant/",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "prices",
						"in": "query",
						"description": "Modifies the prices array for this lesson",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "specialties",
						"in": "query",
						"description": "Modifies the specialities available in this lesson",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					},
					"405": {
						"description": "Method not allowed."
					}
				}
			},
			"delete": {
				"tags": [
					"Default"
				],
				"summary": "Deletes a lesson by ID",
				"description": "Deletes a lesson by ID",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "lessonId",
						"in": "path",
						"description": "ID of the lesson to work with.",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					}
				}
			}
		},
		"/lesson/{lessonId}/assignment": {
			"get": {
				"tags": [
					"Default"
				],
				"summary": "Get the assigned instructor",
				"description": "Get the assigned instructor",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "lessonId",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/User"
							}
						}
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					}
				}
			}
		},
		"/lesson/{lessonId}/assignment/{instructorId}": {
			"put": {
				"tags": [
					"Lessons"
				],
				"summary": "Change the instructor assigned to the lesson",
				"description": "Change the instructor assigned to the lesson",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "instructorId",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "lessonId",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Lesson"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The instructor has been changed."
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					},
					"405": {
						"description": "Method not allowed."
					}
				}
			}
		},
		"/lesson/{lessonId}/participant": {
			"put": {
				"tags": [
					"Default"
				],
				"summary": "Remove or add a participant to a lesson",
				"description": "Remove or add a participant to a lesson",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "lessonId",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Lesson"
						}
					},
					{
						"name": "participants",
						"in": "query",
						"description": "A list id containing all of the participants, in order to remove a participant submit a list without his id (just other participants), if you would like to add a participant submit a list containing his id (and all other participants)",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					},
					"405": {
						"description": "Method not allowed."
					}
				}
			}
		},
		"/lesson/{lessonId}/participant/{participantId}": {
			"put": {
				"tags": [
					"Default"
				],
				"summary": "Modifies a lesson participant",
				"description": "Modifies a lesson participant",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "participantId",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "lessonId",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The participant has been modified."
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					},
					"405": {
						"description": "Method not allowed."
					}
				}
			}
		},
		"/login": {
			"post": {
				"tags": [
					"Default"
				],
				"summary": "Stub login method",
				"description": "Stub login method",
				"consumes": [],
				"produces": [],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "The user has been deleted or is inactive."
					},
					"403": {
						"description": "Wrong combination of email/password."
					},
					"404": {
						"description": "No user with a given email found."
					}
				}
			}
		},
		"/logout": {
			"post": {
				"tags": [
					"Default"
				],
				"summary": "Stub logout method",
				"description": "Stub logout method",
				"consumes": [],
				"produces": [],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/message": {
			"get": {
				"tags": [
					"Messages"
				],
				"summary": "Gets messages having specific parameters",
				"description": "Gets messages having specific parameters",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "toId",
						"in": "query",
						"description": "Get recieved messages of user - THIS IS A TEST METHOD",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "startDate",
						"in": "query",
						"description": "fetch messages from date range",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "TYPE",
						"in": "query",
						"description": "fetch messages of given type",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "unread",
						"in": "query",
						"description": "fetch only messages that are unread",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "fromId",
						"in": "query",
						"description": "Fetch all messages sent from given person/school",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "endDate",
						"in": "query",
						"description": "Fetch messages up to given date",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "You do not have sufficient access to perform this operation"
					},
					"403": {
						"description": "The provided input is incorrect, please review it and try again."
					},
					"404": {
						"description": "There is no data identifiable by the given parameters."
					}
				}
			},
			"post": {
				"tags": [
					"Messages"
				],
				"summary": "Adds a new message to db",
				"description": "Adds a new message to db",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Message"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"405": {
						"description": "Method not allowed."
					}
				}
			}
		},
		"/message/{messageId}": {
			"get": {
				"tags": [
					"Messages"
				],
				"summary": "Gets a message by id",
				"description": "Gets a message by id",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "messageId",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Message"
						}
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					}
				}
			},
			"delete": {
				"tags": [
					"Messages"
				],
				"summary": "Deletes a message",
				"description": "Deletes a message",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "messageId",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					}
				}
			}
		},
		"/resetPassword": {
			"put": {
				"tags": [
					"Default"
				],
				"summary": "Resets a user's password",
				"description": "Resets a user's password",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/User"
						}
					},
					{
						"name": "email",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The password was reset and a confirmation email is sent."
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"404": {
						"description": "The email is not in the database."
					},
					"405": {
						"description": "Method not allowed."
					}
				}
			}
		},
		"/school": {
			"post": {
				"tags": [
					"Default"
				],
				"summary": "Creates a new school",
				"description": "Creates a new school",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/School"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"405": {
						"description": "Method not allowed."
					}
				}
			}
		},
		"/school/{schoolId}": {
			"get": {
				"tags": [
					"Default"
				],
				"summary": "Gets a school by ID",
				"description": "Gets a school by ID",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "schoolId",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/School"
						}
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					}
				}
			},
			"put": {
				"tags": [
					"Default"
				],
				"summary": "Modifies an existing school",
				"description": "Modifies an existing school",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "schoolId",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/School"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					},
					"405": {
						"description": "Method not allowed."
					}
				}
			}
		},
		"/school/{schoolId}/feedbacks": {
			"get": {
				"tags": [
					"Schools"
				],
				"summary": "Gets all feedbacks received by the school.",
				"description": "Gets all feedbacks received by the school.",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "schoolId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Feedback"
							}
						}
					},
					"401": {
						"description": "Permission not granted."
					},
					"404": {
						"description": "The requested resource does not exist."
					}
				}
			}
		},
		"/school/{schoolId}/messages": {
			"get": {
				"tags": [
					"Schools"
				],
				"summary": "Gets all school messages.",
				"description": "Gets all school messages.",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "schoolId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Message"
							}
						}
					},
					"401": {
						"description": "Permission not granted"
					},
					"404": {
						"description": "The requested resource does not exist"
					}
				}
			}
		},
		"/transaction": {
			"post": {
				"tags": [
					"Payments"
				],
				"summary": "Creates a new transaction",
				"description": "Creates a new transaction",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Transaction"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"405": {
						"description": "Method not allowed."
					}
				}
			}
		},
		"/transaction/summary": {
			"get": {
				"tags": [
					"Payments"
				],
				"summary": "If userId is specifiec, returns JSON: {amount: paidCredit, bonus:savedCredit} \nIf schoolId, returns JSON:  {amount: earn",
				"description": "If userId is specifiec, returns JSON: {amount: paidCredit, bonus:savedCredit} \nIf schoolId, returns JSON:  {amount: earnedCredit, bonus: credit gave away in promotions}\nIf both, returns JSON:  {amount: credits earned on a given user by the school, bonus: credit awarder for the user by the school}",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "userId",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "schoolId",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Outputs a JSON object, representation to be defined."
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					}
				}
			}
		},
		"/transaction/{transactionId}": {
			"get": {
				"tags": [
					"Payments"
				],
				"summary": "Gets a transaction by ID",
				"description": "Gets a transaction by ID",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "transactionId",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Transaction"
						}
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					}
				}
			}
		},
		"/transactions/{schoolId}": {
			"get": {
				"tags": [
					"Payments"
				],
				"summary": "Gets all transactions for a given school",
				"description": "Gets all transactions for a given school",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "schoolId",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Transaction"
							}
						}
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					}
				}
			}
		},
		"/user": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Gets users according to parameters (will be paged to avoid huge lists).",
				"description": "Gets users according to parameters (will be paged to avoid huge lists).",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "startPage",
						"in": "query",
						"description": "Index of the page to fetch",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"in": "query",
						"description": "Size of a page",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "type",
						"in": "query",
						"description": "User type to fetch",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/User"
							}
						}
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					}
				}
			},
			"post": {
				"tags": [
					"Users"
				],
				"summary": "Creates a new user.",
				"description": "Creates a new user.",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"405": {
						"description": "Method not allowed."
					}
				}
			}
		},
		"/user/stub": {
			"post": {
				"tags": [
					"Users"
				],
				"summary": "Creates a new stub user.",
				"description": "Creates a new stub user.",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/User"
						}
					},
					{
						"name": "email",
						"in": "query",
						"description": "The email of the stub user - This parameter IS mandatory",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "firstName",
						"in": "query",
						"description": "The name of the stub user - This parameter is NOT mandatory",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "lastName",
						"in": "query",
						"description": "The lastName of the stub user - This parameter is NOT mandatory",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "You do not have sufficient access to perform this operation"
					},
					"403": {
						"description": "The provided input is incorrect, please review it and try again."
					},
					"405": {
						"description": "Method not allowed."
					}
				}
			}
		},
		"/user/{userId}": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Gets a user by ID",
				"description": "Gets a user by ID",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"description": "ID of the user to work with",
						"required": true,
						"type": "integer",
						"format": "int64"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/User"
							}
						}
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					}
				}
			},
			"put": {
				"tags": [
					"Users"
				],
				"summary": "Updates a selected user",
				"description": "Updates a selected user",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"description": "ID of the user to work with",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"403": {
						"description": "Invalid data provided."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					},
					"405": {
						"description": "Method not allowed."
					}
				}
			},
			"delete": {
				"tags": [
					"Users"
				],
				"summary": "Deletes a user by ID",
				"description": "Deletes a user by ID",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"description": "ID of the user to work with",
						"required": true,
						"type": "integer",
						"format": "int64"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					}
				}
			}
		},
		"/user/{userId}/feedbacks": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Gets all user feedbacks",
				"description": "Gets all user feedbacks",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Feedback"
							}
						}
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					}
				}
			}
		},
		"/user/{userId}/messages": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Gets all user messages.",
				"description": "Gets all user messages.",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"description": "ID of the user to get the messages for",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Message"
							}
						}
					},
					"400": {
						"description": "The submitted request is malformed."
					},
					"401": {
						"description": "Permission not granted."
					},
					"404": {
						"description": "The element with the given ID does not exist."
					}
				}
			}
		}
	},
	"definitions": {
		"User": {
			"required": [
				"_id",
				"active",
				"deleted",
				"email",
				"name",
				"surname",
				"userType"
			],
			"properties": {
				"_id": {
					"type": "string",
					"example": "1"
				},
				"active": {
					"type": "boolean",
					"example": "false",
					"description": "Says whether the user confirmed the registration. Also becomes inactive upon account deletion request."
				},
				"authentications": {
					"type": "array",
					"description": "A list of available authentication methods configured for the user.",
					"items": {
						"$ref": "#/definitions/Authentication"
					}
				},
				"deleted": {
					"type": "boolean",
					"example": "false",
					"description": "Says whether the user has been deleted. If true - it is scheduled for permanent deletion."
				},
				"email": {
					"type": "string",
					"example": "sample email",
					"description": "The user's email address."
				},
				"feedbacksIn": {
					"type": "array",
					"description": "A list of all feedbacks the user has received.",
					"items": {
						"$ref": "#/definitions/Feedback"
					}
				},
				"feedbacksOut": {
					"type": "array",
					"description": "A list of all feedbacks the user has given.",
					"items": {
						"$ref": "#/definitions/Feedback"
					}
				},
				"languages": {
					"type": "array",
					"description": "A list of languages offered by an instructor.",
					"items": {
						"type": "string",
						"example": "sample languages"
					}
				},
				"lessons": {
					"type": "array",
					"description": "A list of lessons booked by the user / assigned to the instructor.",
					"items": {
						"type": "string",
						"example": "sample lessons"
					}
				},
				"name": {
					"type": "string",
					"example": "sample name",
					"description": "The user's name."
				},
				"notifications": {
					"type": "array",
					"description": "A list of notifications the user received.",
					"items": {
						"$ref": "#/definitions/Message"
					}
				},
				"permissions": {
					"type": "array",
					"description": "A list of user's permissions (depending on the user type).",
					"items": {
						"type": "string",
						"example": "sample permissions"
					}
				},
				"phoneNumber": {
					"type": "string",
					"example": "sample phoneNumber",
					"description": "User's contact number."
				},
				"photoURL": {
					"type": "string",
					"example": "sample photoURL",
					"description": "URL of user's avatar."
				},
				"resetPasswordToken": {
					"type": "string",
					"example": "sample resetPasswordToken",
					"description": "A unique, random token dedicated for the specific user view to reset the password."
				},
				"schools": {
					"type": "array",
					"description": "A list of schools the user belongs to.",
					"items": {
						"type": "string",
						"example": "1"
					}
				},
				"specializations": {
					"type": "array",
					"description": "A list of specializations offered by the instructor.",
					"items": {
						"type": "string",
						"example": "sample specializations"
					}
				},
				"timesOff": {
					"type": "array",
					"description": "A list of periods where the instructor is unavailable.",
					"items": {
						"$ref": "#/definitions/TimeInterval"
					}
				},
				"userType": {
					"type": "string",
					"example": "sample userType",
					"description": "Type of the user: regular, instructor, director, manager."
				},
				"surname": {
					"type": "string",
					"example": "sample surname",
					"description": "The user's surname."
				}
			}
		},
		"Transaction": {
			"required": [
				"_id",
				"amount",
				"currency",
				"date",
				"transactionType"
			],
			"properties": {
				"_id": {
					"type": "string",
					"example": "1"
				},
				"amount": {
					"type": "number",
					"format": "double",
					"example": "1.1",
					"description": "The amount of money to be transferred."
				},
				"bonus": {
					"type": "number",
					"format": "double",
					"example": "1.1",
					"description": "Amount of bonus money awarded in case of a special transaction"
				},
				"comment": {
					"type": "string",
					"example": "sample comment",
					"description": "A brief description of transaction's purpose."
				},
				"currency": {
					"type": "string",
					"example": "sample currency",
					"description": "The currency in which the transaction will be done."
				},
				"date": {
					"type": "string",
					"format": "date",
					"example": "1.1",
					"description": "A date at which the transaction occurs."
				},
				"productId": {
					"type": "string",
					"example": "sample productId",
					"description": "ID of lesson or bundle ordered (or null if it's a refund/referral etc)"
				},
				"schoolId": {
					"type": "string",
					"example": "1.1",
					"description": "ID of the school that does the transaction (if it is not manually booked)."
				},
				"transactionType": {
					"type": "string",
					"example": "sample transactionType",
					"description": "Type of the transaction: lesson purchase, refund, referral bonus, etc."
				},
				"userId": {
					"type": "string",
					"example": "1.1",
					"description": "ID of the user booking the transaction (if booked manually)."
				}
			},
			"description": "An entity representing a single transaction made by a user or  a school."
		},
		"Message": {
			"required": [
				"_id",
				"deleted",
				"fromId",
				"important",
				"message",
				"read",
				"role",
				"timesOff",
				"timestamp",
				"toId",
				"type"
			],
			"properties": {
				"_id": {
					"type": "string",
					"example": "1"
				},
				"accepted": {
					"type": "boolean",
					"example": "false",
					"description": "Whether the request was accepted."
				},
				"assignedInstructorId": {
					"type": "string",
					"example": "sample assignedInstructorId",
					"description": "The id of the newly assigned instructor."
				},
				"bookerId": {
					"type": "string",
					"example": "sample bookerId",
					"description": "The id of the person (or school) who booked the lesson for you"
				},
				"changedFields": {
					"type": "array",
					"description": "The names of fields that were changed in the given lesson.",
					"items": {
						"type": "string",
						"example": "sample changedFields"
					}
				},
				"timestamp": {
					"type": "string",
					"format": "date",
					"description": "READ ONLY\nThe time of this message creation"
				},
				"deleted": {
					"type": "boolean",
					"example": "false",
					"description": "Says whether the message has been deleted. If true - it is scheduled for permanent deletion."
				},
				"formerInstructorId": {
					"type": "string",
					"example": "sample formerInstructorId",
					"description": "The Id of the instructor previously assigned to this lesson."
				},
				"fromId": {
					"type": "string",
					"example": "1",
					"description": "Id of the person / school which sent this message"
				},
				"important": {
					"type": "boolean",
					"example": "false",
					"description": "Whether it is in the 'important' category."
				},
				"lessonId": {
					"type": "string",
					"example": "sample lessonId",
					"description": "The id of the lesson that was changed"
				},
				"memberId - INVESTIGATE": {
					"type": "string",
					"example": "sample memberId",
					"description": "INVESTIGATE"
				},
				"message": {
					"type": "string",
					"example": "sample message",
					"description": "The content of the message"
				},
				"oldProducts - INVESTIGATE": {
					"type": "array",
					"description": "INVESTIGATE",
					"items": {
						"type": "string",
						"example": "sample oldProducts"
					}
				},
				"oldRole": {
					"type": "string",
					"example": "sample oldRole"
				},
				"participantId": {
					"type": "string",
					"example": "sample participantId"
				},
				"productId": {
					"type": "string",
					"example": "sample productId"
				},
				"products": {
					"type": "array",
					"description": "",
					"items": {
						"type": "string",
						"example": "sample products"
					}
				},
				"read": {
					"type": "boolean",
					"example": "false",
					"description": "Whether it has already been read."
				},
				"requestId": {
					"type": "string",
					"example": "sample requestId"
				},
				"role": {
					"type": "string",
					"example": "sample role"
				},
				"timesOff": {
					"description": "A list of periods where the instructor will not be available",
					"$ref": "#/definitions/TimeInterval"
				},
				"toId": {
					"type": "string",
					"example": "1",
					"description": "Id of the user/school that is the receiver of this message."
				},
				"type": {
					"type": "string",
					"example": "sample type",
					"description": "Type of message - request, notification etc."
				}
			},
			"description": "A generic Message entity, having all possible fields that could appear in any message type. \nTypes and type-specific fields:\n - time off request: timesOff, timeOffRepeats\n - lesson request: role, accepted\n - lesson booked/unbooked: lessonId, bookerId, participantId\n - assigned lesson: memberId, assignedInstructorId, lessonId\n - unassigned lesson: memberId, lessonId, formerInstructorId\n - product added/removed/changed: productId, changedFields\n - product order changed: products, oldProducts\n - membership accepted/refused: requestId, memberId\n - membership over/changed: memberId, oldRole"
		},
		"MeetingPoint": {
			"required": [
				"_id",
				"geo",
				"name"
			],
			"properties": {
				"geo": {
					"description": "Coordinates of the meeting point.",
					"$ref": "#/definitions/Geo"
				},
				"name": {
					"type": "string",
					"example": "sample Name",
					"description": "Name of the meeting point."
				},
				"_id": {
					"type": "integer",
					"format": "int64",
					"example": "1"
				}
			},
			"description": "Default meeting point for a lesson"
		},
		"Generator": {
			"required": [
				"_id",
				"deleted",
				"name",
				"type"
			],
			"properties": {
				"_id": {
					"type": "integer",
					"format": "int64",
					"example": "1"
				},
				"comment": {
					"type": "string",
					"example": "sample comment",
					"description": "A brief description of the generator."
				},
				"deleted": {
					"type": "boolean",
					"example": "false",
					"description": "Says whether the generator has been deleted. If true - it is scheduled for permanent deletion."
				},
				"generatedLessons": {
					"type": "array",
					"description": "A list of lessons generated by this generator.",
					"items": {
						"type": "string",
						"example": "1"
					}
				},
				"name": {
					"type": "string",
					"example": "sample name",
					"description": "Name of the generator."
				},
				"type": {
					"type": "string",
					"example": "sample type",
					"description": "Determines whether it is a lesson or a bundle generator."
				},
				"generatedBundles": {
					"type": "array",
					"description": "A list of bundles generated by this generator.",
					"items": {
						"type": "string",
						"example": "sample generatedBundles"
					}
				}
			}
		},
		"TimeInterval": {
			"required": [
				"_id",
				"endTime",
				"startTime"
			],
			"properties": {
				"endTime": {
					"type": "string",
					"format": "date"
				},
				"startTime": {
					"type": "string",
					"format": "date"
				},
				"_id": {
					"type": "string",
					"example": "sample _id"
				}
			},
			"description": "An entity representing a pair of times - starting and ending."
		},
		"Authentication": {
			"required": [
				"emails",
				"password",
				"type",
				"username"
			],
			"properties": {
				"emails": {
					"type": "array",
					"items": {
						"type": "string",
						"example": "sample emails"
					}
				},
				"password": {
					"type": "string",
					"example": "sample password",
					"description": "User password."
				},
				"token": {
					"type": "string",
					"example": "sample token"
				},
				"type": {
					"type": "string",
					"example": "sample type",
					"description": "Authentication type."
				},
				"username": {
					"type": "string",
					"example": "sample username",
					"description": "User's username."
				}
			},
			"description": "An object describing a user's authentication (facebook, google, regular, etc)."
		},
		"Bundle": {
			"required": [
				"_id",
				"deleted",
				"discount",
				"generatorId",
				"lessons",
				"name",
				"publicFlag",
				"schoolId"
			],
			"properties": {
				"_id": {
					"type": "string",
					"example": "1"
				},
				"comment": {
					"type": "string",
					"example": "sample comment",
					"description": "A user's comment towards the bundle."
				},
				"deleted": {
					"type": "boolean",
					"example": "false",
					"description": "Says whether the bundle has been deleted. If true - it is scheduled for permanent deletion."
				},
				"discount": {
					"type": "number",
					"format": "double",
					"example": "1.1",
					"description": "The discount the user gets for this lesson"
				},
				"generatorId": {
					"type": "string",
					"example": "1",
					"description": "The ID of the generator by which this bundle was generated."
				},
				"lessons": {
					"type": "array",
					"description": "A list of lessons belonging to this bundle.",
					"items": {
						"type": "string",
						"example": "1"
					}
				},
				"name": {
					"type": "string",
					"example": "sample name",
					"description": "The name of the bundle."
				},
				"publicFlag": {
					"type": "boolean",
					"example": "false",
					"description": "A flag determining whether the bundle is public or private."
				},
				"schoolId": {
					"type": "string",
					"example": "1",
					"description": "ID of the school at which the bundle's lessons will occur."
				}
			},
			"description": "A group of lessons with a discount if a user will decide to purchase all of them."
		},
		"Address": {
			"required": [
				"_id",
				"geo"
			],
			"properties": {
				"city": {
					"type": "string",
					"example": "sample city"
				},
				"country": {
					"type": "string",
					"example": "sample country"
				},
				"geo": {
					"$ref": "#/definitions/Geo"
				},
				"street": {
					"type": "string",
					"example": "sample street"
				},
				"streetNum": {
					"type": "integer",
					"format": "int32",
					"example": "1"
				},
				"zipcode": {
					"type": "string",
					"example": "sample zipcode"
				},
				"_id": {
					"type": "string",
					"example": "sample _id"
				}
			},
			"description": "Internal object of a School entity."
		},
		"Feedback": {
			"required": [
				"_id",
				"fromWhom",
				"lessonId",
				"schoolId",
				"toWhom"
			],
			"properties": {
				"_id": {
					"type": "string",
					"example": "1"
				},
				"fromWhom": {
					"type": "string",
					"example": "1",
					"description": "ID of the sender."
				},
				"lessonId": {
					"type": "string",
					"example": "1",
					"description": "ID of the lesson the feedback refers to."
				},
				"schoolId": {
					"type": "string",
					"example": "1",
					"description": "ID of the school the lesson was carried out at."
				},
				"toWhom": {
					"type": "string",
					"example": "1",
					"description": "ID of the receiver."
				}
			}
		},
		"Geo": {
			"required": [
				"_id",
				"lat",
				"lng"
			],
			"properties": {
				"_id": {
					"type": "integer",
					"format": "int64",
					"example": "1"
				},
				"lat": {
					"type": "number",
					"format": "double",
					"example": "1.1"
				},
				"lng": {
					"type": "number",
					"format": "double",
					"example": "1.1"
				}
			},
			"description": "Internal coordinate object used for meeting points."
		},
		"Lesson": {
			"required": [
				"_id",
				"booked",
				"bookingType",
				"clientSource",
				"deleted",
				"instructorId",
				"level",
				"meetingPoint",
				"name",
				"participants",
				"schoolId",
				"timeSpan"
			],
			"properties": {
				"_id": {
					"type": "string",
					"example": "1"
				},
				"booked": {
					"type": "boolean",
					"example": "false",
					"description": "Whether it is booked or not"
				},
				"bookingType": {
					"type": "string",
					"example": "sample bookingType",
					"description": "Whether it's booked by one or multiple persons"
				},
				"bundleId": {
					"type": "string",
					"example": "1",
					"description": "Id of the bundle containing the lesson"
				},
				"clientSource": {
					"type": "string",
					"example": "sample clientSource",
					"description": "Skipodium user, manually booked by school, white label etc"
				},
				"comment": {
					"type": "string",
					"example": "sample comment",
					"description": "A brief comment about the lesson."
				},
				"deleted": {
					"type": "boolean",
					"example": "false",
					"description": "Says whether the lesson has been deleted. If true - it is scheduled for permanent deletion."
				},
				"discount": {
					"type": "number",
					"format": "double",
					"example": "1.1",
					"description": "The discount the user gets for this lesson"
				},
				"generatorId": {
					"type": "string",
					"example": "1",
					"description": "ID of the generator the lesson was generated by."
				},
				"timeSpan": {
					"description": "Time span of the lesson.",
					"$ref": "#/definitions/TimeInterval"
				},
				"instructorBonusFlag": {
					"type": "boolean",
					"example": "false",
					"description": "Bonus the instructor gets for the lesson"
				},
				"instructorId": {
					"type": "string",
					"example": "1",
					"description": "ID of the instructor running the lesson."
				},
				"level": {
					"type": "array",
					"description": "The skill levels involved in this lesson (could differ for different participants?).",
					"items": {
						"type": "string",
						"example": "sample level"
					}
				},
				"maxAge": {
					"type": "integer",
					"format": "int32",
					"example": "1",
					"description": "Maximum age for this lesson."
				},
				"maxParticipants": {
					"type": "integer",
					"format": "int32",
					"example": "1",
					"description": "Maximum number of participants."
				},
				"meetingPoint": {
					"description": "A meeting point for this lesson.",
					"$ref": "#/definitions/Geo"
				},
				"minAge": {
					"type": "integer",
					"format": "int32",
					"example": "1",
					"description": "Minimum age for this lesson."
				},
				"minParticipants": {
					"type": "integer",
					"format": "int32",
					"example": "1",
					"description": "Minimum number of participants for this lesson."
				},
				"name": {
					"type": "string",
					"example": "sample name",
					"description": "Name of the lesson."
				},
				"participants": {
					"type": "array",
					"description": "List of ids of users attending this lesson",
					"items": {
						"type": "string",
						"example": "sample participants"
					}
				},
				"prices": {
					"type": "array",
					"description": "A list of price thresholds, depending on the time of booking?",
					"items": {
						"type": "number",
						"format": "double",
						"example": "1.1"
					}
				},
				"schoolId": {
					"type": "string",
					"example": "1",
					"description": "ID of the school at which the lesson was carried out."
				},
				"specialties": {
					"type": "array",
					"items": {
						"type": "string",
						"example": "sample specialties"
					}
				}
			}
		},
		"School": {
			"required": [
				"_id",
				"address",
				"bankDetails",
				"defaultMeetingPoints",
				"deleted",
				"email",
				"employees",
				"logo",
				"messages",
				"name",
				"openingHours",
				"resort"
			],
			"properties": {
				"_id": {
					"type": "integer",
					"format": "int64",
					"example": "1"
				},
				"address": {
					"description": "School address",
					"$ref": "#/definitions/Address"
				},
				"bankDetails": {
					"description": "School banking information.",
					"$ref": "#/definitions/BankDetails"
				},
				"contacts": {
					"type": "array",
					"description": "A list of phone numbers, emails, or any contact details the school possesses.",
					"items": {
						"type": "string",
						"example": "sample contacts"
					}
				},
				"defaultMeetingPoints": {
					"type": "array",
					"description": "A list of established meeting points for instructors and students.",
					"items": {
						"$ref": "#/definitions/MeetingPoint"
					}
				},
				"deleted": {
					"type": "boolean",
					"example": "false",
					"description": "Says whether the school has been deleted. If true - it is scheduled for permanent deletion."
				},
				"email": {
					"type": "string",
					"example": "sample email",
					"description": "Main email address which can be used to contact the school"
				},
				"employees": {
					"type": "array",
					"description": "List of id's of all school employees.",
					"items": {
						"type": "string",
						"example": "1"
					}
				},
				"logo": {
					"type": "string",
					"example": "sample logo",
					"description": "An url  with the school logo file"
				},
				"messages": {
					"type": "array",
					"description": "An inbox containing all messages sent to the school",
					"items": {
						"$ref": "#/definitions/Message"
					}
				},
				"name": {
					"type": "string",
					"example": "sample name",
					"description": "The name of the school"
				},
				"openingHours": {
					"type": "string",
					"format": "date",
					"description": "School working time (internal object with start and end time)."
				},
				"resort": {
					"type": "array",
					"description": "A list of all resorts of given school - a minimum of one is required",
					"items": {
						"type": "string",
						"example": "sample resort"
					}
				}
			},
			"description": "Information about a given school"
		},
		"BankDetails": {
			"required": [
				"_id",
				"accountNumber",
				"currency"
			],
			"properties": {
				"accountNumber": {
					"type": "string",
					"example": "1",
					"description": "Bank account number."
				},
				"currency": {
					"type": "string",
					"example": "sample currency",
					"description": "Currency the account number is in."
				},
				"_id": {
					"type": "string",
					"example": "sample _id"
				}
			},
			"description": "This will be an internal object of an entity of type School."
		}
	}
}