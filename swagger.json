{
	"swagger": "2.0",
	"consumes": [
		"application/json"
	],
	"produces": [
		"application/json"
	],
	"host": "api.adam.skipodium.com",
	"info": {
		"description": "REST-ful API used to communicate with the Skipodium backend.",
		"version": "1.0.0",
		"title": "Skipodium API",
		"contact": {
			"name": "Blue Brick API Team",
			"url": "",
			"email": "adam.domagalski@blue-brick.com"
		}
	},
	"tags": [{
		"name": "Default",
		"description": "Items either unrelated to any section or used by entities of different sections"
	}, {
		"name": "Schools",
		"description": "Items related to School management"
	}, {
		"name": "Messages",
		"description": "Items related to requests and notifications."
	}, {
		"name": "Feedbacks",
		"description": "Items related to feedback management"
	}, {
		"name": "Users",
		"description": "Items related to user management"
	}, {
		"name": "Lessons",
		"description": "Items related to lesson management"
	}, {
		"name": "Payments",
		"description": "Items related to all sorts of payments / awards of bonus money"
	}, {
		"name": "Bundles",
		"description": "Items related to lesson bundles"
	}, {
		"name": "Generators",
		"description": "Items related to lesson/bundle generators"
	}, {
		"name": "Employees",
		"description": "Items related to staff management"
	}, {
		"name": "Resorts",
		"description": "Items related to resorts"
	}],
	"paths": {
		"/": {
			"get": {
				"tags": [
					"Default"
				],
				"summary": "Home address. Returns current session data.",
				"description": "Home address. Returns current session data.",
				"consumes": [],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "OK"
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/contact": {
			"post": {
				"tags": [
					"Default"
				],
				"summary": "Sends a message to Skipodium support",
				"description": "Sends a message to Skipodium support",
				"consumes": [
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [{
					"name": "email",
					"in": "formData",
					"description": "Email address of the sender.",
					"required": true,
					"type": "string"
				}, {
					"name": "newsletter",
					"in": "formData",
					"description": "Newsletter flag.",
					"required": true,
					"type": "boolean"
				}, {
					"name": "subject",
					"in": "formData",
					"description": "Message topic.",
					"required": true,
					"type": "string"
				}, {
					"name": "message",
					"in": "formData",
					"description": "Message content.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					}
				}
			}
		},
		"/auth/facebook": {
			"get": {
				"tags": [
					"Default"
				],
				"summary": "Facebook login method.",
				"description": "Facebook login method.",
				"consumes": [],
				"produces": [],
				"parameters": [],
				"responses": {
					"200": {
						"description": "OK"
					}
				}
			}
		},
		"/auth/google": {
			"get": {
				"tags": [
					"Default"
				],
				"summary": "Google login method.",
				"description": "Google login method.",
				"consumes": [],
				"produces": [],
				"parameters": [],
				"responses": {
					"200": {
						"description": "OK"
					}
				}
			}
		},
		"/auth/twitter": {
			"get": {
				"tags": [
					"Default"
				],
				"summary": "Twitter login method.",
				"description": "Twitterlogin method.",
				"consumes": [],
				"produces": [],
				"parameters": [],
				"responses": {
					"200": {
						"description": "OK"
					}
				}
			}
		},
		"/login": {
			"post": {
				"tags": [
					"Default"
				],
				"summary": "Login method",
				"description": "Login method",
				"consumes": [
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [{
					"in": "formData",
					"name": "email",
					"required": true,
					"type": "string"
				}, {
					"in": "formData",
					"name": "password",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/signup": {
			"post": {
				"tags": [
					"Default"
				],
				"summary": "Signup method",
				"description": "Signup method",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"in": "formData",
					"name": "email",
					"required": true,
					"type": "string"
				}, {
					"in": "formData",
					"name": "password",
					"required": true,
					"type": "string"
				}, {
					"in": "formData",
					"name": "name",
					"required": true,
					"type": "string"
				}, {
					"in": "formData",
					"name": "surname",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/logout": {
			"get": {
				"tags": [
					"Default"
				],
				"summary": "Logout",
				"description": "Logout",
				"consumes": [],
				"produces": [],
				"parameters": [],
				"responses": {
					"200": {
						"description": "OK"
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/employee": {
			"post": {
				"tags": [
					"Employees"
				],
				"summary": "Adds a new employee",
				"description": "Adds a new employee",
				"consumes": ["application/x-www-form-urlencoded"],
				"produces": [],
				"parameters": [{
					"name": "name",
					"in": "formData",
					"description": "Name of the employee user (if created from scratch with user).",
					"required": false,
					"type": "string"
				}, {
					"name": "surname",
					"in": "formData",
					"description": "Surame of the employee user (if created from scratch with user).",
					"required": false,
					"type": "string"
				}, {
					"name": "email",
					"in": "formData",
					"description": "Email of the employee user (if created from scratch with user).",
					"required": false,
					"type": "string"
				}, {
					"name": "userId",
					"in": "formData",
					"description": "ID of the user the employee will be assigned to (if created for an existing user).",
					"required": false,
					"type": "string"
				}, {
					"name": "schoolId",
					"in": "formData",
					"description": "ID of the school of the new employee.",
					"required": true,
					"type": "string"
				}, {
					"name": "permissions",
					"in": "formData",
					"description": "JSON array - see MOCKUP API",
					"required": true,
					"type": "string"
				}, {
					"name": "salary",
					"in": "formData",
					"description": "Employee salary.",
					"required": true,
					"type": "string"
				}, {
					"name": "comment",
					"in": "formData",
					"description": "Comment about the employee.",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"403": {
						"description": "Forbidden"
					}
				}
			},
			"get": {
				"tags": [
					"Employees"
				],
				"summary": "Gets employees by params",
				"description": "Gets employees by params",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "language",
					"in": "query",
					"description": "Language",
					"required": false,
					"type": "string"
				}, {
					"name": "specialtyType",
					"in": "query",
					"description": "Specialty - see MOCKUP API",
					"required": false,
					"type": "string"
				}, {
					"name": "expertise",
					"in": "query",
					"description": "Expertise - see MOCKUP API",
					"required": false,
					"type": "string"
				}, {
					"name": "level",
					"in": "query",
					"description": "Level - see MOCKUP API",
					"required": false,
					"type": "string"
				}, {
					"name": "permissions",
					"in": "query",
					"description": "Permission - see MOCKUP API",
					"required": false,
					"type": "string"
				}, {
					"name": "schoolId",
					"in": "query",
					"description": "School id",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					}
				}
			}
		},
		"/employee/{employeeId}": {
			"get": {
				"tags": [
					"Employees"
				],
				"summary": "Gets an employee by ID",
				"description": "Gets an employee by ID",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "employeeId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Employee"
						}
					},
					"200": {
						"description": "OK"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"put": {
				"tags": [
					"Employees"
				],
				"summary": "Modifies an existing employee.",
				"description": "Modifies an existing employee.",
				"consumes": ["application/x-www-form-urlencoded"],
				"produces": [],
				"parameters": [{
					"name": "employeeId",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "permissions",
					"in": "formData",
					"description": "A list of employee permissions. JSON array - see MOCKUP API.",
					"required": false,
					"type": "string"
				}, {
					"name": "specialties",
					"in": "formData",
					"description": "A list of specialties, JSON array of objects - see MOCKUP API.",
					"required": false,
					"type": "string"
				}, {
					"name": "timesOff",
					"in": "formData",
					"description": "A list of employee times off, JSON array of objects - see MOCKUP API.",
					"required": false,
					"type": "string"
				}, {
					"name": "schedule",
					"in": "formData",
					"description": "Employee time off schedule, JSON object - see MOCKUP API.",
					"required": false,
					"type": "string"
				}, {
					"name": "salary",
					"in": "formData",
					"description": "Employee salary.",
					"required": false,
					"type": "string"
				}, {
					"name": "comment",
					"in": "formData",
					"description": "Comment about the employee.",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"delete": {
				"tags": [
					"Employees"
				],
				"summary": "Schedules an employee for deletion.",
				"description": "Schedules an employee for deletion.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "employeeId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/employee/{employeeId}/times": {
			"get": {
				"tags": [
					"Employees"
				],
				"summary": "Gets the times off of the employee.",
				"description": "Gets the times off of the employee.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "employeeId",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "timeFrom",
					"in": "query",
					"description": "Lower time bound: 2015-11-11T16:11:32.714Z",
					"required": false,
					"type": "string"
				}, {
					"name": "timeTo",
					"in": "query",
					"description": "Upper time bound: 2016-11-11T16:11:32.714Z",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/TimeInterval"
							}
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/employee/{employeeId}/employment/{accept}": {
			"put": {
				"tags": [
					"Employees"
				],
				"summary": "Manages accept employment request.",
				"description": "Manages accept employment request.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "employeeId",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "accept",
					"in": "path",
					"required": true,
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "Success"
					},					
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/employee/{employeeId}/timeOff": {
			"put": {
				"tags": [
					"Employees"
				],
				"summary": "Adds timeOffs for the employee.",
				"description": "Adds timeOffs for the employee.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "employeeId",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "startDate",
					"in": "formData",
					"description": "Start date of the generated time offs, format: YYYY-MM-DD",
					"required": true,
					"type": "string"
				},  {
					"name": "endDate",
					"in": "formData",
					"description": "End date of the generated time offs, format: YYYY-MM-DD",
					"required": true,
					"type": "string"
				}, {
					"name": "startTime",
					"in": "formData",
					"description": "Start time of the generated time offs, format: HH:MM:SS",
					"required": true,
					"type": "string"
				}, {
					"name": "endTime",
					"in": "formData",
					"description": "End time of the generated time offs, format: HH:MM:SS",
					"required": true,
					"type": "string"
				}, {
					"name": "repeatMode",
					"in": "formData",
					"description": "Repeat pattern enum - weekly, daily, or weekday.",
					"required": true,
					"type": "string"
				}, {
					"name": "repeatEvery",
					"in": "formData",
					"description": "If weekly or daily mode - says that it repeats every N days/weeks.",
					"required": false,
					"type": "string"
				}, {
					"name": "repeatOn",
					"in": "formData",
					"description": "Selects weekdays to repeat on - weekly mode only (JSON array of weekday indexes)",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Success"					
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/employee/{employeeId}/stats": {
			"get": {
				"tags": [
					"Employees"
				],
				"summary": "Gets the stats of the employee.  Returns a custom JSON.",
				"description": "Gets the stats of the employee. Returns a custom JSON.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "employeeId",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "timeFrom",
					"in": "query",
					"description": "Date from which to search: 2015-11-11T16:11:32.714Z",
					"required": false,
					"type": "string"
				}, {
					"name": "timeTo",
					"in": "query",
					"description": "Date till which to search: 2016-11-11T16:11:32.714Z",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},

		"/lessonInstructors": {
			"get": {
				"tags": [
					"Lessons"
				],
				"summary": "Returns a list of entries: {imageUrl, firstName, surname, lowestPrice, specialties}",
				"description": "Returns a list of entries: {imageUrl, firstName, surname, lowestPrice, specialties}",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "resortId",
					"in": "query",
					"description": "ID of the resort to look in",
					"required": false,
					"type": "string"
				}, {
					"name": "timeFrom",
					"in": "query",
					"description": "Date from which to search: 2015-11-11T16:11:32.714Z",
					"required": false,
					"type": "string"
				}, {
					"name": "timeTo",
					"in": "query",
					"description": "Date till which to search: 2016-11-11T16:11:32.714Z",
					"required": false,
					"type": "string"
				}, {
					"name": "numParticipants",
					"in": "query",
					"description": "Target number of participants.",
					"required": false,
					"type": "string"
				}, {
					"name": "specialtyType",
					"in": "query",
					"description": "Target specialty, see MOCKUP - API",
					"required": false,
					"type": "string"
				}, {
					"name": "expertises",
					"in": "query",
					"description": "Expertises, see MOCKUP - API",
					"required": false,
					"type": "string"
				}, {
					"name": "level",
					"in": "query",
					"description": "Level, see MOCKUP - API",
					"required": false,
					"type": "string"
				}, {
					"name": "minPrice",
					"in": "query",
					"description": "Minimum price.",
					"required": false,
					"type": "string"
				}, {
					"name": "maxPrice",
					"in": "query",
					"description": "Maximum price.",
					"required": false,
					"type": "string"
				}, {
					"name": "language",
					"in": "query",
					"description": "Language.",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					}
				}
			}
		},
		"/generator": {
			"post": {
				"tags": [
					"Generators"
				],
				"summary": "Creates a new generator",
				"description": "Creates a new generator",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "name",
					"in": "formData",
					"description": "Name of the new generator.",
					"required": true,
					"type": "string"
				}, {
					"name": "priority",
					"in": "formData",
					"description": "Generator priority (number).",
					"required": true,
					"type": "string"
				}, {
					"name": "generatorType",
					"in": "formData",
					"description": "Generator type (lessonGenerator or bundleGenerator).",
					"required": true,
					"type": "string"
				}, {
					"name": "lessonTemplateId",
					"in": "formData",
					"description": "ID of the lesson template used by the generator.",
					"required": true,
					"type": "string"
				}, {
					"name": "schoolId",
					"in": "formData",
					"description": "ID of the school that owns the generator.",
					"required": true,
					"type": "string"
				}, {
					"name": "comment",
					"in": "formData",
					"description": "Comment about the generator.",
					"required": false,
					"type": "string"
				}, {
					"name": "instructorIds",
					"in": "formData",
					"description": "Array of instructor IDs for this generator - see MOCKUP - API.",
					"required": true,
					"type": "string"
				}, {
					"name": "schedules",
					"in": "formData",
					"description": "Generator schedules - see MOCKUP - API.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				}
			}
		},
		"/generator/{generatorId}": {
			"get": {
				"tags": [
					"Generators"
				],
				"summary": "Gets a generator by ID",
				"description": "Gets a generator by ID",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "generatorId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Generator"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"put": {
				"tags": [
					"Generators"
				],
				"summary": "Edits an existing generator",
				"description": "Edits an existing generator",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "generatorId",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "formData",
					"description": "Name of the new generator.",
					"required": false,
					"type": "string"
				}, {
					"name": "priority",
					"in": "formData",
					"description": "Generator priority.",
					"required": false,
					"type": "string"
				}, {
					"name": "generatorType",
					"in": "formData",
					"description": "Generator type (lessonGenerator or bundleGenerator).",
					"required": false,
					"type": "string"
				}, {
					"name": "lessonTemplateId",
					"in": "formData",
					"description": "ID of the lesson template used by the generator.",
					"required": false,
					"type": "string"
				}, {
					"name": "schoolId",
					"in": "formData",
					"description": "ID of the school that owns the generator.",
					"required": false,
					"type": "string"
				}, {
					"name": "comment",
					"in": "formData",
					"description": "Comment about the generator.",
					"required": false,
					"type": "string"
				}, {
					"name": "instructorIds",
					"in": "formData",
					"description": "Array of instructor IDs for this generator- see MOCKUP - API.",
					"required": false,
					"type": "string"
				},  {
					"name": "schedules",
					"in": "formData",
					"description": "Generator schedules - see MOCKUP - API.",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"delete": {
				"tags": [
					"Generators"
				],
				"summary": "Deletes a generator",
				"description": "Deletes a generator",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "generatorId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/lesson": {
			"get": {
				"tags": [
					"Lessons"
				],
				"summary": "Gets lessons by parameters",
				"description": "Gets lessons by parameters",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "timeFrom",
					"in": "query",
					"description": "Date from which to search: 2015-11-11T16:11:32.714Z.",
					"required": false,
					"type": "string"
				}, {
					"name": "timeTo",
					"in": "query",
					"description": "Date till which to search: 2015-11-11T16:11:32.714Z.",
					"required": false,
					"type": "string"
				}, {
					"name": "numParticipants",
					"in": "query",
					"description": "Target number of participants.",
					"required": false,
					"type": "string"
				}, {
					"name": "specialty",
					"in": "query",
					"description": "Target specialty - see MOCKUP - API.",
					"required": false,
					"type": "string"
				}, {
					"name": "expertise",
					"in": "query",
					"description": "Expertise - see MOCKUP - API.", 
					"required": false,
					"type": "string"
				}, {
					"name": "level",
					"in": "query",
					"description": "Level - see MOCKUP - API.", 
					"required": false,
					"type": "string"
				}, {
					"name": "minPrice",
					"in": "query",
					"description": "Minimum price.",
					"required": false,
					"type": "string"
				}, {
					"name": "maxPrice",
					"in": "query",
					"description": "Maximum price.",
					"required": false,
					"type": "string"
				}, {
					"name": "age",
					"in": "query",
					"description": "Target age.",
					"required": false,
					"type": "string"
				}, {
					"name": "instructorId",
					"in": "query",
					"description": "Instructor id",
					"required": false,
					"type": "string"
				}, {
					"name": "instructorBonusFlag",
					"in": "query",
					"description": "Instructor bonus flag",
					"required": false,
					"type": "boolean"
				}, {
					"name": "schoolId",
					"in": "query",
					"description": "School id",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Lesson"
							}
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"post": {
				"tags": [
					"Lessons"
				],
				"summary": "Creates a new lesson",
				"description": "Creates a new lesson",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "timeFrom",
					"in": "formData",
					"description": "Lesson start time: 2015-11-11T16:11:32.714Z",
					"required": true,
					"type": "string"
				}, {
					"name": "timeTo",
					"in": "formData",
					"description": "Lesson end time: 2015-11-11T16:11:32.714Z.",
					"required": true,
					"type": "string"
				}, {
					"name": "minParticipants",
					"in": "formData",
					"description": "Min number of participants.",
					"required": false,
					"type": "string"
				}, {
					"name": "maxParticipants",
					"in": "formData",
					"description": "Max number of participants.",
					"required": false,
					"type": "string"
				}, {
					"name": "specialties",
					"in": "formData",
					"description": "Lesson specialties - see MOCKUP - API.",
					"required": false,
					"type": "string"
				}, {
					"name": "prices",
					"in": "formData",
					"description": "Lesson prices for consecutive participant numbers: [10, 100]",
					"required": true,
					"type": "string"
				}, {
					"name": "minAge",
					"in": "formData",
					"description": "Min age.",
					"required": false,
					"type": "string"
				}, {
					"name": "maxAge",
					"in": "formData",
					"description": "Max age.",
					"required": false,
					"type": "string"
				}, {
					"name": "instructorId",
					"in": "formData",
					"description": "Instructor id",
					"required": false,
					"type": "string"
				}, {
					"name": "instructorBonusFlag",
					"in": "formData",
					"description": "Instructor bonus flag",
					"required": true,
					"type": "boolean"
				}, {
					"name": "schoolId",
					"in": "formData",
					"description": "School id",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "formData",
					"description": "Lesson name.",
					"required": true,
					"type": "string"
				}, {
					"name": "clientSource",
					"in": "formData",
					"description": "user/school/whiteLabel",
					"required": true,
					"type": "string"
				}, {
					"name": "comment",
					"in": "formData",
					"description": "Comment about the lesson.",
					"required": false,
					"type": "string"
				}, {
					"name": "generatorId",
					"in": "formData",
					"description": "ID of the generator that created the lesson.",
					"required": false,
					"type": "string"
				}, {
					"name": "geoName",
					"in": "formData",
					"description": "Name of the meeting point.",
					"required": true,
					"type": "string"
				}, {
					"name": "geoLat",
					"in": "formData",
					"description": "Latitude of the meeting point.",
					"required": true,
					"type": "string"
				}, {
					"name": "geoLng",
					"in": "formData",
					"description": "Longitude of the meeting point.",
					"required": true,
					"type": "string"
				}, {
					"name": "private",
					"in": "formData",
					"description": "Says whether the lesson is private.",
					"required": false,
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				}
			}
		},
		"/lesson/{lessonId}": {
			"get": {
				"tags": [
					"Lessons"
				],
				"summary": "Gets a lesson by ID",
				"description": "Gets a lesson by ID",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "lessonId",
					"in": "path",
					"description": "ID of the lesson to work with.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Lesson"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"put": {
				"tags": [
					"Lessons"
				],
				"summary": "Modifies an existing lesson",
				"description": "Modifies an existing lesson",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "lessonId",
					"in": "path",
					"description": "ID of the lesson to work with.",
					"required": true,
					"type": "string"
				}, {
					"name": "timeFrom",
					"in": "formData",
					"description": "New time from: 2015-11-11T16:11:32.714Z", 
					"required": false,
					"type": "string"
				}, {
					"name": "timeTo",
					"in": "formData",
					"description": "New time to: 2015-11-11T16:11:32.714Z",
					"required": false,
					"type": "string"
				}, {
					"name": "minParticipants",
					"in": "formData",
					"description": "Min number of participants.",
					"required": false,
					"type": "string"
				}, {
					"name": "maxParticipants",
					"in": "formData",
					"description": "Max number of participants.",
					"required": false,
					"type": "string"
				}, {
					"name": "specialties",
					"in": "formData",
					"description": "Lesson specialties - see MOCKUP - API.",
					"required": false,
					"type": "string"
				}, {
					"name": "prices",
					"in": "formData",
					"description": "Lesson prices for consecutive participant numbers - see MOCKUP-API.",
					"required": false,
					"type": "string"
				}, {
					"name": "minAge",
					"in": "formData",
					"description": "Min age.",
					"required": false,
					"type": "string"
				}, {
					"name": "maxAge",
					"in": "formData",
					"description": "Max age.",
					"required": false,
					"type": "string"
				}, {
					"name": "instructorId",
					"in": "formData",
					"description": "Instructor id",
					"required": false,
					"type": "string"
				}, {
					"name": "instructorBonusFlag",
					"in": "formData",
					"description": "Instructor bonus flag",
					"required": false,
					"type": "boolean"
				}, {
					"name": "schoolId",
					"in": "formData",
					"description": "School id",
					"required": false,
					"type": "string"
				}, {
					"name": "name",
					"in": "formData",
					"description": "Lesson name.",
					"required": false,
					"type": "string"
				}, {
					"name": "clientSource",
					"in": "formData",
					"description": "user/school/whiteLabel",
					"required": false,
					"type": "string"
				}, {
					"name": "comment",
					"in": "formData",
					"description": "Comment about the lesson.",
					"required": false,
					"type": "string"
				}, {
					"name": "generatorId",
					"in": "formData",
					"description": "ID of the generator that created the lesson.",
					"required": false,
					"type": "string"
				}, {
					"name": "meetingPoint",
					"in": "formData",
					"description": "Meeting point JSON - see MOCKUP-API.",
					"required": false,
					"type": "string"
				}, {
					"name": "private",
					"in": "formData",
					"description": "Says whether the lesson is private.",
					"required": false,
					"type": "boolean"
				}, {
					"name": "participants",
					"in": "formData",
					"description": "Lesson participant IDs - see MOCKUP-API.",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"delete": {
				"tags": [
					"Lessons"
				],
				"summary": "Deletes a lesson by ID",
				"description": "Deletes a lesson by ID",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "lessonId",
					"in": "path",
					"description": "ID of the lesson to work with.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/lesson/{lessonId}/assignment": {
			"get": {
				"tags": [
					"Lessons"
				],
				"summary": "Get the assigned instructor",
				"description": "Get the assigned instructor",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "lessonId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/User"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/lesson/{lessonId}/unbook/{userId}": {
			"put": {
				"tags": [
					"Lessons"
				],
				"summary": "Unbooks a specific lesson for a user.",
				"description": "Unbooks a specific lesson for a user.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "lessonId",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "userId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/lesson/{lessonId}/unbookManual/{userId}": {
			"put": {
				"tags": [
					"Lessons"
				],
				"summary": "Unbooks a manually booked lesson for a user.",
				"description": "Unbooks a manually booked lesson for a user.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "lessonId",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "userId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/lesson/{lessonId}/assignment/{instructorId}": {
			"put": {
				"tags": [
					"Lessons"
				],
				"summary": "Change the instructor assigned to the lesson",
				"description": "Change the instructor assigned to the lesson",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "instructorId",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "lessonId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The instructor has been changed."
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/purchase": {
			"post": {
				"tags": [
					"Lessons"
				],
				"summary": "Purchase a new lesson.",
				"description": "Purchase a new lesson.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "lessons",
					"in": "formData",
					"description": "A list of lessons to buy with their respective participants.",
					"required": true,
					"type": "string"
				}, {
					"name": "participants",
					"in": "formData",
					"description": "A list of participants with their respective lesson IDs.",
					"required": true,
					"type": "string"
				}, {
					"name": "paymentNonce",
					"in": "formData",
					"description": "Braintree payment method nonce received from the Braintree server.",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Success."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/lesson/{lessonId}/purchaseManual": {
			"post": {
				"tags": [
					"Lessons"
				],
				"summary": "Manually purchase a lesson",
				"description": "Manually purchase a new lesson by a school manager or instructor.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "lessonId",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "clientId",
					"in": "formData",
					"description": "A list of IDs of users the lesson was bought for (JSON array).",
					"required": true,
					"type": "string"
				}, {
					"name": "amount",
					"in": "formData",
					"description": "The amount of money the purchasing person paid.",
					"required": true,
					"type": "number"
				}, {
					"name": "paymentMethod",
					"in": "formData",
					"description": "The selected payment method (bankTransfer,creditCard, debitCard or cash).",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Success."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/lessonTemplate": {
			"post": {
				"tags": [
					"Lessons"
				],
				"summary": "Add a new lesson template.",
				"description": "Add a new lesson template.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"in": "formData",
					"description": "Comment about the lesson template.",
					"name": "comment",
					"required": false,
					"type": "string"
				}, {
					"in": "formData",
					"description": "Says whether produced lessons will have an instructor bonus.",
					"name": "instructorBonusFlag",
					"required": true,
					"type": "boolean"
				}, {
					"in": "formData",
					"description": "Maximum age for the produced lessons.",
					"name": "maxAge",
					"required": false,
					"type": "string"
				}, {
					"in": "formData",
					"description": "Minimum age for the produced lessons.",
					"name": "minAge",
					"required": false,
					"type": "string"
				}, {
					"in": "formData",
					"description": "Minimum participant count for the produced lessons.",
					"name": "minParticipants",
					"required": false,
					"type": "string"
				}, {
					"in": "formData",
					"description": "Maximum participant count for the produced lessons.",
					"name": "maxParticipants",
					"required": false,
					"type": "string"
				}, {
					"in": "formData",
					"description": "Name of the lesson template.",
					"name": "name",
					"required": true,
					"type": "string"
				}, {
					"in": "formData",
					"description": "Name of the lessons produced.",
					"name": "lessonName",
					"required": true,
					"type": "string"
				}, {
					"name": "meetingPoint",
					"in": "formData",
					"description": "Meeting point JSON (see MOCKUP-API).",
					"required": true,
					"type": "string"
				}, {
					"name": "specialties",
					"in": "formData",
					"description": "Produced lessons' specialties (JSON object array, see MOCKUP-API).",
					"required": false,
					"type": "string"
				}, {
					"name": "prices",
					"in": "formData",
					"description": "Produced lessons' prices for consecutive participant numbers: [10, 100]",
					"required": true,
					"type": "string"
				}, {
					"name": "schoolId",
					"in": "formData",
					"description": "Produced lessons' school id",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Success."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/lessonTemplate/{lessonTemplateId}": {
			"get": {
				"tags": [
					"Lessons"
				],
				"summary": "Get a lesson template by ID.",
				"description": "Get a lesson template by ID.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "lessonTemplateId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Success."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"put": {
				"tags": [
					"Lessons"
				],
				"summary": "Modify a lesson template by ID.",
				"description": "Modify a lesson template by ID.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "lessonTemplateId",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"in": "formData",
					"description": "Comment about the lesson template.",
					"name": "comment",
					"required": false,
					"type": "string"
				}, {
					"in": "formData",
					"description": "Says whether produced lessons will have an instructor bonus.",
					"name": "instructorBonusFlag",
					"required": false,
					"type": "boolean"
				}, {
					"in": "formData",
					"description": "Maximum age for the produced lessons.",
					"name": "maxAge",
					"required": false,
					"type": "string"
				}, {
					"in": "formData",
					"description": "Minimum age for the produced lessons.",
					"name": "minAge",
					"required": false,
					"type": "string"
				}, {
					"in": "formData",
					"description": "Minimum participant count for the produced lessons.",
					"name": "minParticipants",
					"required": false,
					"type": "string"
				}, {
					"in": "formData",
					"description": "Maximum participant count for the produced lessons.",
					"name": "maxParticipants",
					"required": false,
					"type": "string"
				}, {
					"in": "formData",
					"description": "Name of the lesson template.",
					"name": "name",
					"required": false,
					"type": "string"
				}, {
					"in": "formData",
					"description": "Name of the lessons produced.",
					"name": "lessonName",
					"required": false,
					"type": "string"
				}, {
					"name": "meetingPoint",
					"in": "formData",
					"description": "Meeting point JSON (see MOCKUP-API).",
					"required": false,
					"type": "string"
				}, {
					"name": "specialties",
					"in": "formData",
					"description": "Produced lessons' specialties (see MOCKUP-API).",
					"required": false,
					"type": "string"
				}, {
					"name": "prices",
					"in": "formData",
					"description": "Produced lessons' prices for consecutive participant numbers: [10, 100]",
					"required": false,
					"type": "string"
				}, {
					"name": "schoolId",
					"in": "formData",
					"description": "Produced lessons' school id",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Success."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"delete": {
				"tags": [
					"Lessons"
				],
				"summary": "Delete a lesson template by ID.",
				"description": "Delete a lesson template by ID.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "lessonTemplateId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Success."
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/message": {
			"post": {
				"tags": [
					"Messages"
				],
				"summary": "Send a message",
				"description": "Send a message",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "fromEntity",
					"in": "formData",
					"required": true,
					"type": "string"
				}, {
					"name": "fromId",
					"in": "formData",
					"required": true,
					"type": "string"
				}, {
					"name": "toEntity",
					"in": "formData",
					"required": true,
					"type": "string"
				}, {
					"name": "toId",
					"in": "formData",
					"required": true,
					"type": "string"
				}, {
					"name": "message",
					"in": "formData",
					"required": true,
					"type": "string"
				}, {
					"name": "important",
					"in": "formData",
					"required": true,
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/message/{messageId}": {
			"get": {
				"tags": [
					"Messages"
				],
				"summary": "Gets a message by id",
				"description": "Gets a message by id",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "messageId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Message"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"delete": {
				"tags": [
					"Messages"
				],
				"summary": "Deletes a message",
				"description": "Deletes a message",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "messageId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/message/{messageId}/markAsRead": {
			"put": {
				"tags": [
					"Messages"
				],
				"summary": "Marks the message as read",
				"description": "Marks the message as read",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "messageId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/feedback": {
			"post": {
				"tags": [
					"Feedbacks"
				],
				"summary": "Creates a new feedback",
				"description": "Creates a new feedback",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "fromEntity",
					"in": "formData",
					"required": true,
					"type": "string"
				}, {
					"name": "fromId",
					"in": "formData",
					"required": true,
					"type": "string"
				}, {
					"name": "toEntity",
					"in": "formData",
					"required": true,
					"type": "string"
				}, {
					"name": "toId",
					"in": "formData",
					"required": true,
					"type": "string"
				}, {
					"name": "rating",
					"in": "formData",
					"required": true,
					"type": "string"
				}, {
					"name": "lessonId",
					"in": "formData",
					"required": true,
					"type": "string"
				}, {
					"name": "schoolId",
					"in": "formData",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/school": {
			"post": {
				"tags": [
					"Schools"
				],
				"summary": "Creates a new school",
				"description": "Creates a new school",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "email",
					"in": "formData",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "formData",
					"required": true,
					"type": "string"
				}, {
					"name": "siteUrl",
					"in": "formData",
					"required": false,
					"type": "string"
				},{
					"name": "country",
					"in": "formData",
					"required": false,
					"type": "string"
				},{
					"name": "resort",
					"in": "formData",
					"description" : "Resort name",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/school/{schoolId}": {
			"get": {
				"tags": [
					"Schools"
				],
				"summary": "Gets a school by ID",
				"description": "Gets a school by ID",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "schoolId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/School"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"put": {
				"tags": [
					"Schools"
				],
				"summary": "Modifies an existing school",
				"description": "Modifies an existing school",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "schoolId",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "addressCity",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "addressCountry",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "addressStreet",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "addressStreetNum",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "addressZipCode",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "addressState",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "email",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "logo",
					"in": "formData",
					"description" : "This tool does not support uploading files.",
					"required": false,
					"type": "string"
				}, {
					"name": "name",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "royaltyPercent",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "resortId",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "openingHours",
					"in": "formData",
					"description": "See MOCKUP-API",
					"required": false,
					"type": "string"
				}, {
					"name": "defaultMeetingPoints",
					"in": "formData",
					"description": "See MOCKUP-API",
					"required": false,
					"type": "string"
				}, {
					"name": "contactsFacebook",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "contactsTwitter",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "contactsGoogleplus",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "contactsPhone",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "contactsMail",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "contactsSiteUrl",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "manuallySetRating",
					"in": "formData",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/school/{schoolId}/feedbacks": {
			"get": {
				"tags": [
					"Schools"
				],
				"summary": "Gets all school feedbacks",
				"description": "Gets all school feedbacks",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "schoolId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Feedback"
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/school/{schoolId}/accept/{accept}": {
			"put": {
				"tags": [
					"Schools"
				],
				"summary": "Sends an activation request to skipodium",
				"description": "Sends an activation request to skipodium, can only be sent by a school director, upon success an email will be sent to skipodium managment to manually activate the school",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "schoolId",
					"in": "path",
					"required": true,
					"type": "string"
				},{
					"name": "accept",
					"in": "path",
					"required": true,
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}

			}
		},
		"/school/{schoolId}/activate": {
			"put": {
				"tags": [
					"Schools"
				],
				"summary": "Sends an activation request to skipodium",
				"description": "Sends an activation request to skipodium, can only be sent by a school director, upon success an email will be sent to skipodium managment to manually activate the school",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "schoolId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}

			}
		},
		"/school/{schoolId}/bookedClients": {
			"get": {
				"tags": [
					"Schools"
				],
				"summary": "Gets a list of school clients",
				"description": "Gets a list of school clients",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "schoolId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/User"
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/school/{schoolId}/clientList": {
			"get": {
				"tags": [
					"Schools"
				],
				"summary": "Gets the list of all school clients.",
				"description": "Gets the list of all school clients.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "schoolId",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "lessonId",
					"in": "query",
					"description": "ID of the lesson to fetch the clients for",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/User"
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/school/{schoolId}/clientStats/{clientId}": {
			"get": {
				"tags": [
					"Schools"
				],
				"summary": "Gets the stats for a user at school. Returns a custom JSON.",
				"description": "Gets the stats for a user at school. Returns a custom JSON.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "schoolId",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "clientId",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "timeFrom",
					"in": "query",
					"description": "Date from which to search. Format: 2015-11-01T10:30:00.000Z",
					"required": false,
					"type": "string"
				}, {
					"name": "timeTo",
					"in": "query",
					"description": "Date till which to search. Format: 2015-11-01T10:30:00.000Z",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Success."
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/school/{schoolId}/employees": {
			"get": {
				"tags": [
					"Schools"
				],
				"summary": "Gets all school employees",
				"description": "Gets all school employees",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "schoolId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Employee"
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/school/{schoolId}/generators": {
			"get": {
				"tags": [
					"Schools"
				],
				"summary": "Gets all generators of a school",
				"description": "Gets all generators of a school",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "schoolId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Generator"
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/school/{schoolId}/messages": {
			"get": {
				"tags": [
					"Schools"
				],
				"summary": "Gets all school messages",
				"description": "Gets all school messages",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "schoolId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Message"
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/school/{schoolId}/transactions": {
			"get": {
				"tags": [
					"Schools"
				],
				"summary": "Gets all transactions for a given school, for a given user ID",
				"description": "Gets all transactions for a given school, for a given user ID",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "schoolId",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "userId",
					"in": "query",
					"required": false,
					"type": "string"
				}, {
					"name": "lessonId",
					"in": "query",
					"required": false,
					"type": "string"
				}, {
					"name": "timeFrom",
					"in": "query",
					"description": "Format: 2015-11-01T10:30:00.000Z",
					"required": false,
					"type": "string"
				}, {
					"name": "timeTo",
					"in": "query",
					"description": "Format: 2015-11-01T10:30:00.000Z",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Transaction"
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/clientToken": {
			"get": {
				"tags": [
					"Payments"
				],
				"summary": "Gets the Braintree client token",
				"description": "Gets the Braintree client token",
				"consumes": [],
				"produces": [],
				"parameters": [],
				"responses": {
					"200": {
						"description": "OK"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/transaction/{transactionId}": {
			"get": {
				"tags": [
					"Payments"
				],
				"summary": "Gets a transaction by ID",
				"description": "Gets a transaction by ID",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "transactionId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Transaction"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/user": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Gets users according to parameters.",
				"description": "Gets users according to parameters.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "name",
					"in": "query",
					"required": false,
					"type": "string"
				}, {
					"name": "surname",
					"in": "query",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/User"
							}
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/user/stub": {
			"post": {
				"tags": [
					"Users"
				],
				"summary": "Creates a new stub user.",
				"description": "Creates a new stub user.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "email",
					"in": "formData",
					"description": "The email of the stub user",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "formData",
					"description": "The name of the stub user",
					"required": true,
					"type": "string"
				}, {
					"name": "surname",
					"in": "formData",
					"description": "The lastName of the stub user",
					"required": true,
					"type": "string"
				}, {
					"name": "schoolId",
					"in": "formData",
					"description": "The ID of the school creating the stub user",
					"required": true,
					"type": "string"
				}, {
					"name": "birthDate",
					"in": "formData",
					"description": "E.g. 1991-04-04T10:00:00.000Z",
					"required": false,
					"type": "string"
				}, {
					"name": "address",
					"in": "formData",
					"description": "The address of the stub user",
					"required": false,
					"type": "string"
				}, {
					"name": "nationality",
					"in": "formData",
					"description": "The nationality of the stub user",
					"required": false,
					"type": "string"
				}, {
					"name": "vatCode",
					"in": "formData",
					"description": "The VAT ID of the stub user",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/user/{userId}": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Gets a user by ID",
				"description": "Gets a user by ID",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "userId",
					"in": "path",
					"description": "ID of the user to work with",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/User"
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"put": {
				"tags": [
					"Users"
				],
				"summary": "Updates a selected user",
				"description": "Updates a selected user",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "userId",
					"in": "path",
					"description": "ID of the user to work with",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "email",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "surname",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "phoneNumber",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "languages",
					"in": "formData",
					"description": "See MOCKUP-API",
					"required": false,
					"type": "string"
				}, {
					"name": "photoURL",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "birthDate",
					"in": "formData",
					"description": "E.g: 1991-04-04T10:00:00.000Z",
					"required": false,
					"type": "string"
				}, {
					"name": "address",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "nationality",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "vatCode",
					"in": "formData",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"delete": {
				"tags": [
					"Users"
				],
				"summary": "Deletes a user by ID",
				"description": "Deletes a user by ID",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "userId",
					"in": "path",
					"description": "ID of the user to work with",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/user/{userId}/stats/{schoolId}": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Gets the user stats. Returns a custom JSON.",
				"description": "Gets the user stats. Returns a custom JSON.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "userId",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "schoolId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Success."
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/user/{userId}/employment": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Gets all user employments. Returns an array of pairs {employee, school}.",
				"description": "Gets all user employments. Returns an array of pairs {employee, school}.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "userId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/user/{userId}/feedbacks": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Gets all user feedbacks",
				"description": "Gets all user feedbacks",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "userId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Feedback"
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/user/{userId}/feedbacks/random": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Gets a number of random user feedbacks",
				"description": "Gets a number of random user feedbacks",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "userId",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "count",
					"in": "query",
					"description": "Number of feedbacks to fetch.",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Feedback"
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/user/{userId}/lessons": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Gets all user lessons",
				"description": "Gets all user lessons",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "userId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Lesson"
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}

				}
			}
		},
		"/user/{userId}/messages": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Gets all user messages.",
				"description": "Gets all user messages.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "userId",
					"in": "path",
					"description": "ID of the user to get the messages for",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Message"
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/user/{userId}/transactions": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Gets all user transactions, for a given school",
				"description": "Gets all user transactions, for a given school",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "userId",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Transaction"
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/user/{email}/resetPassword": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Resets a user's password",
				"description": "Resets a user's password",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "email",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The password was reset and a confirmation email is sent."
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/user/{token}/newPassword": {
			"post": {
				"tags": [
					"Users"
				],
				"summary": "Resets a user's password",
				"description": "Resets a user's password",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "token",
					"in": "path",
					"required": true,
					"type": "string"
				},{
					"name": "newpassword",
					"in": "formData",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The password was reset and a confirmation email is sent."
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/user/{token}/verify": {
			"put": {
				"tags": [
					"Users"
				],
				"summary": "Verifies user using the provided token",
				"description": "Verifies user using the provided token",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "token",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "User verified"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/resort": {
			"get": {
				"tags": [
					"Resorts"
				],
				"summary": "Gets resorts by params.",
				"description": "Gets resorts by params.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "name",
					"in": "query",
					"description": "Resort name.",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Resort"
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			},
			"post": {
				"tags": [
					"Resorts"
				],
				"summary": "Adds a new resort.",
				"description": "Adds a new resort.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "name",
					"in": "formData",
					"description" : "Resort name - must be unique",
					"required": true,
					"type": "string"
				}, {
					"name": "photoURL",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "lat",
					"in": "formData",
					"required": false,
					"type": "number"
				}, {
					"name": "lng",
					"in": "formData",
					"required": false,
					"type": "number"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Resort"
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/resort/{id}": {
			"get": {
				"tags": [
					"Resorts"
				],
				"summary": "Gets resort by id.",
				"description": "Gets resort by id.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "id",
					"in": "path",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Resort"
						}
					}
				},
				"401": {
					"description": "Unauthorized"
				},
				"404": {
					"description": "Not Found"
				}
			},
			"put": {
				"tags": [
					"Resorts"
				],
				"summary": "Modifies resort by id.",
				"description": "Modifies resort by id.",
				"consumes": [],
				"produces": [],
				"parameters": [{
					"name": "id",
					"in": "path",
					"required": true,
					"type": "string"
				}, {
					"name": "name",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "photoURL",
					"in": "formData",
					"required": false,
					"type": "string"
				}, {
					"name": "lat",
					"in": "formData",
					"required": false,
					"type": "number"
				}, {
					"name": "lng",
					"in": "formData",
					"required": false,
					"type": "number"
				}],
				"responses": {
					"200": {
						"description": "OK"
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		}
	},
	"definitions": {
		"Employee": {
			"required": [
				"_id",
				"deleted",
				"permissions",
				"timesOff",
				"userId",
				"schoolId",
				"salary"
			],
			"properties": {
				"_id": {
					"type": "string",
					"example": "sample _id"
				},
				"userId": {
					"description": "The corresponding `User`, stored as ID, but will be fetched as an entire embedded object at backend side.",
					"$ref": "#/definitions/User"
				},
				"permissions": {
					"type": "array",
					"description": "What the user is allowed to do in this school.",
					"items": {
						"type": "string",
						"example": "sample permissions"
					}
				},
				"timesOff": {
					"type": "array",
					"description": "Time intervals during which the user is unavailable",
					"items": {
						"$ref": "#/definitions/TimeInterval"
					}
				},
				"schoolId": {
					"description": "The school the employee works at.",
					"$ref": "#/definitions/School"
				},
				"specialties": {
					"type": "array",
					"description": "Specialties the user can teach.",
					"items": {
						"type": "string",
						"$ref": "#/definitions/Specialty"
					}
				},
				"deleted": {
					"type": "boolean",
					"example": "false",
					"description": "Says whether the employee was deleted."
				},
				"comment": {
					"type": "string",
					"example": "sample comment",
					"description": "Employee comment."
				},
				"salary": {
					"type": "number",
					"format": "double",
					"example": "1.1",
					"description": "Salary"
				}
			},
			"description": "School employee"
		},
		"Feedback": {
			"required": [
				"_id",
				"fromId",
				"lessonId",
				"rating",
				"toId",
				"deleted"
			],
			"properties": {
				"_id": {
					"type": "string",
					"example": "1"
				},
				"fromId": {
					"description": "ID and entity type of the sender.",
					"$ref": "#/definitions/EntityID"
				},
				"deleted": {
					"type": "boolean",
					"example": "false",
					"description": "Whether the feedback has been deleted or not."
				},
				"lessonId": {
					"type": "string",
					"example": "1",
					"description": "ID of the lesson the feedback refers to."
				},
				"toId": {
					"description": "ID and entity type of the receiver.",
					"$ref": "#/definitions/EntityID"
				},
				"message": {
					"type": "string",
					"example": "sample message",
					"description": "The content of the feedback"
				},
				"rating": {
					"type": "number",
					"format": "double",
					"example": "1.1",
					"description": "The rating of the feedback"
				},
				"absences": {
					"type": "array",
					"description": "A list of users who didn't show up for the lesson in case it didn't occur after all.",
					"items": {
						"type": "string",
						"example": "sample absences"
					}
				},
				"comment": {
					"type": "string",
					"example": "sample comment",
					"description": "A note on the lesson in case of special situations (e.g. if it didn't happen for whatever reason)."
				}
			},
			"description": "Entity representing a feedback (user to instructor, instructor to user or user to school)"
		},
		"Generator": {
			"required": [
				"_id",
				"deleted",
				"lessonTemplates",
				"lessonTemplateId",
				"generatedLessons",
				"name",
				"priority",
				"publicFlag",
				"schoolId",
				"times",
				"generatorType"
			],
			"properties": {
				"_id": {
					"type": "integer",
					"format": "int64",
					"example": "1"
				},
				"comment": {
					"type": "string",
					"example": "sample comment",
					"description": "A brief description of the generator."
				},
				"deleted": {
					"type": "boolean",
					"example": "false",
					"description": "Says whether the generator has been deleted. If true - it is scheduled for permanent deletion."
				},
				"generatedLessons": {
					"type": "array",
					"description": "A list of IDs of lessons generated by this generator.",
					"items": {
						"type": "string",
						"example": "1"
					}
				},
				"name": {
					"type": "string",
					"example": "sample name",
					"description": "Name of the generator."
				},
				"generatorType": {
					"type": "string",
					"example": "sample type",
					"description": "Determines whether it is a lesson or a bundle generator."
				},
				"lessonTemplates": {
					"type": "array",
					"description": "Templates used to create new lessons.",
					"items": {
						"type": "string",
						"example": "templ",
						"$ref": "#/definitions/LessonTemplate"
					}
				},
				"priority": {
					"type": "integer",
					"format": "int32",
					"example": "1",
					"description": "The generator priority (starting from 1, 2, 3, ...), determines the generator precedence in case of overlapping lessons."
				},
				"lessonTemplateId": {
					"description": "Template used to generate bundles.",
					"$ref": "#/definitions/LessonTemplate"
				},
				"schoolId": {
					"type": "string",
					"example": "sample schoolId",
					"description": "ID of the school the generator belongs to."
				},
				"times": {
					"description": "List of time intervals for which the lessons / bundles will be generated.",
					"$ref": "#/definitions/TimeInterval"
				},
				"publicFlag": {
					"type": "boolean",
					"example": "false",
					"description": "Decides whether the generated lessons and bundles are public."
				}
			}
		},
		"Lesson": {
			"required": [
				"_id",
				"booked",
				"private",
				"clientSource",
				"deleted",
				"instructorId",
				"meetingPoint",
				"name",
				"participants",
				"schoolId"
			],
			"properties": {
				"_id": {
					"type": "string",
					"example": "1"
				},
				"booked": {
					"type": "boolean",
					"example": "false",
					"description": "Whether it is booked or not"
				},
				"private": {
					"type": "boolean",
					"example": "false",
					"description": "Whether it's booked by one or multiple persons"
				},
				"bundleId": {
					"type": "string",
					"example": "1",
					"description": "Id of the bundle containing the lesson"
				},
				"clientSource": {
					"type": "string",
					"example": "sample clientSource",
					"description": "Skipodium user, manually booked by school, white label etc"
				},
				"comment": {
					"type": "string",
					"example": "sample comment",
					"description": "A brief comment about the lesson."
				},
				"deleted": {
					"type": "boolean",
					"example": "false",
					"description": "Says whether the lesson has been deleted. If true - it is scheduled for permanent deletion."
				},
				"timeFrom": {
					"type": "string",
					"format": "date",
					"description": "Lesson start time"
				},
				"timeTo": {
					"type": "string",
					"format": "date",
					"description": "Lesson end time"
				},
				"instructorBonusFlag": {
					"type": "boolean",
					"example": "false",
					"description": "Bonus the instructor gets for the lesson"
				},
				"instructorId": {
					"type": "string",
					"example": "1",
					"description": "ID of the instructor running the lesson."
				},
				"maxAge": {
					"type": "integer",
					"format": "int32",
					"example": "1",
					"description": "Maximum age for this lesson."
				},
				"maxParticipants": {
					"type": "integer",
					"format": "int32",
					"example": "1",
					"description": "Maximum number of participants."
				},
				"meetingPoint": {
					"description": "A meeting point for this lesson.",
					"$ref": "#/definitions/MeetingPoint"
				},
				"minAge": {
					"type": "integer",
					"format": "int32",
					"example": "1",
					"description": "Minimum age for this lesson."
				},
				"minParticipants": {
					"type": "integer",
					"format": "int32",
					"example": "1",
					"description": "Minimum number of participants for this lesson."
				},
				"name": {
					"type": "string",
					"example": "sample name",
					"description": "Name of the lesson."
				},
				"participants": {
					"type": "array",
					"description": "List of participants  attending this lesson",
					"items": {
						"type": "string",
						"example": "sample participants"
					}
				},
				"prices": {
					"type": "array",
					"description": "A list of price thresholds, depending on the time of booking",
					"items": {
						"type": "number",
						"format": "double",
						"example": "1.1"
					}
				},
				"schoolId": {
					"type": "string",
					"example": "1",
					"description": "ID of the school at which the lesson was carried out."
				},
				"specialties": {
					"type": "array",
					"description": "The specialities covered by the lesson",
					"items": {
						"type": "string",
						"$ref": "#/definitions/Specialty"
					}
				},
				"previousInstructorId": {
					"type": "string",
					"example": "sample previousInstructorId",
					"description": "Id of the previous instructor"
				},
				"generatorId": {
					"type": "string",
					"example": "sample generatorId",
					"description": "ID of the generator the lesson comes from (if any)."
				}
			}
		},
		"LessonTemplate": {
			"required": [
				"_id",
				"groupFlag",
				"schoolId",
				"name",
				"prices"
			],
			"properties": {
				"_id": {
					"type": "string",
					"example": "sample _id"
				},
				"name": {
					"type": "string",
					"example": "sample name",
					"description": "Template name."
				},
				"groupFlag": {
					"type": "boolean",
					"example": "false",
					"description": "Determines whether it is an individual or a group lesson."
				},
				"schoolId": {
					"type": "string",
					"example": "sample school",
					"description": "School assigned to generated lessons."
				},
				"minParticipants": {
					"type": "integer",
					"format": "int32",
					"example": "1",
					"description": "Minimum amount of participants (for group lessons)."
				},
				"maxParticipants": {
					"type": "integer",
					"format": "int32",
					"example": "1",
					"description": "Maximum amount of participants (for a group lesson)."
				},
				"prices": {
					"type": "array",
					"description": "Prices for participants in lesser currency, min 50",
					"items": {
						"type": "number",
						"format": "double",
						"example": "1.1"
					}
				},
				"minAge": {
					"type": "integer",
					"format": "int32",
					"example": "1",
					"description": "Minimum age of the lessons (for group lessons)."
				},
				"maxAge": {
					"type": "integer",
					"format": "int32",
					"example": "1",
					"description": "Maximum age of the lessons (for group lessons)."
				},
				"specialties": {
					"type": "array",
					"description": "Specialty of the generated lessons",
					"items": {
						"type": "string",
						"$ref": "#/definitions/Specialty"
					}
				},
				"instructorBonusFlag": {
					"type": "boolean",
					"example": "false",
					"description": "Decides whether an instructor will receive bonus for the generated lessons."
				},
				"comment": {
					"type": "string",
					"example": "sample comment",
					"description": "A brief description of the template."
				}
			}
		},
		"Message": {
			"required": [
				"_id",
				"deleted",
				"fromId",
				"message",
				"messageType",
				"read",
				"timestamp",
				"toId"			
			],
			"properties": {
				"_id": {
					"type": "string",
					"example": "1"
				},
				"accepted": {
					"type": "boolean",
					"example": "false",
					"description": "Whether the request was accepted."
				},
				"instructorId": {
					"type": "string",
					"example": "sample assignedInstructorId",
					"description": "The id of the newly assigned instructor."
				},
				"bookerId": {
					"type": "string",
					"example": "sample bookerId",
					"description": "The id of the person (or school) who booked the lesson for you"
				},
				"changedFields": {
					"type": "array",
					"description": "The names of fields that were changed in the given lesson.",
					"items": {
						"type": "string",
						"example": "sample changedFields"
					}
				},
				"timestamp": {
					"type": "string",
					"format": "date",
					"description": "The time of this message creation"
				},
				"deleted": {
					"type": "boolean",
					"example": "false",
					"description": "Says whether the message has been deleted. If true - it is scheduled for permanent deletion."
				},
				"formerInstructorId": {
					"type": "string",
					"example": "sample formerInstructorId",
					"description": "The Id of the instructor previously assigned to this lesson."
				},
				"fromId": {
					"description": "Entity type and ID of the person / school which sent this message",
					"$ref": "#/definitions/EntityID"
				},
				"important": {
					"type": "boolean",
					"example": "false",
					"description": "Whether it is in the 'important' category."
				},
				"lessonId": {
					"type": "string",
					"example": "sample lessonId",
					"description": "The id of the lesson that was changed"
				},
				"memberId": {
					"type": "string",
					"example": "sample memberId",
					"description": "ID of the member assigning or unassigning the lesson."
				},
				"message": {
					"type": "string",
					"example": "sample message",
					"description": "The content of the message"
				},
				"messageType": {
					"type": "string",
					"example": "sample type",
					"description": "Type of message - request, notification etc."
				},
				"oldRole": {
					"type": "string",
					"example": "sample oldRole",
					"description": "The previous role of the user who changed"
				},
				"participantId": {
					"type": "string",
					"example": "sample participantId",
					"description": "Person for whom the lesson was booked/unbooked for."
				},
				"productId": {
					"type": "string",
					"example": "sample productId",
					"description": "Id of added/removed/changed  lesson / bundle"
				},
				"read": {
					"type": "boolean",
					"example": "false",
					"description": "Whether it has already been read."
				},
				"role": {
					"type": "string",
					"example": "sample role",
					"description": "The role of the person requesting the lesson"
				},
				"timesOff": {
					"description": "A list of periods where the instructor will not be available",
					"$ref": "#/definitions/TimeInterval"
				},
				"toId": {
					"description": "Entity type and ID of the user/school that is the receiver of this message.",
					"$ref": "#/definitions/EntityID"
				}				
			},
			"description": "A generic Message entity, having all possible fields that could appear in any message type. <br>\nTypes and type-specific fields: <br>\n - time off request: timesOff, timeOffRepeats<br>\n - lesson request: role, accepted<br>\n - lesson booked/unbooked: lessonId, bookerId, participantId<br>\n - assigned lesson: memberId, instructorId, lessonId<br>\n - unassigned lesson: memberId, lessonId, formerInstructorId<br>\n - product added/removed/changed: productId, changedFields<br>\n - membership accepted/refused: requestId, memberId<br>\n - membership over/changed: memberId, oldRole<br>"
		},
		"Resort": {
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"example": "sample name",
					"description": "The name of the resort. Must be unique"
				},
				"coords": {
					"description": "Resort's location",
					"$ref": "#/definitions/Address"
				},
				"pictureURL": {
					"type": "string",
					"example": "sample name",
					"description": "Resort picture URL."
				}
			},
			"description": "Object representing a skiing resort."
		},
		"School": {
			"required": [
				"_id",
				"active",
				"address",
				"bankDetails",
				"defaultMeetingPoints",
				"deleted",
				"email",
				"enabled",
				"logo",
				"name",
				"openingHours",
				"royaltyPercent"
			],
			"properties": {
				"_id": {
					"type": "string",
					"example": "1"
				},
				"address": {
					"description": "School address",
					"$ref": "#/definitions/Address"
				},
				"bankDetails": {
					"description": "School banking information.",
					"$ref": "#/definitions/BankDetails"
				},
				"contacts": {
					"type": "array",
					"description": "List of o. with: fb,twitter,phone, etc.",
					"items": {
						"type": "string",
						"example": "sample contacts"
					}
				},
				"defaultMeetingPoints": {
					"type": "array",
					"description": "A list of established meeting points for instructors and students.",
					"items": {
						"$ref": "#/definitions/MeetingPoint"
					}
				},
				"deleted": {
					"type": "boolean",
					"example": "false",
					"description": "Says whether the school has been deleted. If true - it is scheduled for permanent deletion."
				},
				"email": {
					"type": "string",
					"example": "sample email",
					"description": "Main email address which can be used to contact the school"
				},
				"logo": {
					"type": "string",
					"example": "sample logo",
					"description": "An url  with the school logo file"
				},
				"name": {
					"type": "string",
					"example": "sample name",
					"description": "The name of the school"
				},
				"openingHours": {
					"type": "array",
					"items": {
						"type": "string",
						"format": "date"
					},
					"description": "School working time (internal object with start and end hour)."
				},
				"resort": {
					"$ref": "#/definitions/Resort",
					"description": "The resort the school belongs to."
				},
				"manuallySetRating": {
					"type": "number",
					"format": "double",
					"example": "1.1",
					"description": "School's rating"
				},
				"enabled": {
					"type": "boolean",
					"example": "false",
					"description": "Says whether the school lesson is enabled (e.g. whether its lessons appear for users)."
				},
				"active": {
					"type": "boolean",
					"example": "false",
					"description": "Says whether the school is active."
				},
				"royaltyPercent": {
					"type": "number",
					"format": "double",
					"example": "1.1",
					"description": "The percentage of money the school receives for every lesson."
				}
			},
			"description": "Information about a given school"
		},
		"Transaction": {
			"required": [
				"_id",
				"amount",
				"currency",
				"date",
				"productId",
				"transactionType",
				"userId",
				"stripeTransactionId",
				"channel",
				"status"
			],
			"properties": {
				"_id": {
					"type": "string",
					"example": "1"
				},
				"amount": {
					"type": "number",
					"format": "double",
					"example": "1.1",
					"description": "The amount of money that has already been paid."
				},
				"amountToPay": {
					"type": "number",
					"format": "double",
					"example": "1.1",
					"description": "The total amount of money that has to be paid."
				},
				"bonus": {
					"type": "number",
					"format": "double",
					"example": "1.1",
					"description": "Amount of bonus money awarded by the school in case of a special transaction or promotion"
				},
				"channel": {
					"type": "string",
					"example": "sample channel",
					"description": "The means by which the payment was made (card, manual etc.)."
				},
				"comment": {
					"type": "string",
					"example": "sample comment",
					"description": "A brief description of transaction's purpose."
				},
				"currency": {
					"type": "string",
					"example": "sample currency",
					"description": "The currency in which the transaction will be done."
				},
				"date": {
					"type": "string",
					"format": "date",
					"example": "1.1",
					"description": "A date at which the transaction occurs."
				},
				"paymentMethod": {
					"type": "string",
					"example": "cash",
					"description": "Payment method: bankTransfer, creditCard, debitCard or cash."
				},
				"productId": {
					"description": "EntityID: Type - lesson or bundle, id - prod ID",
					"$ref": "#/definitions/EntityID"
				},
				"schoolId": {
					"type": "string",
					"example": "1.1",
					"description": "ID of the school that does the transaction (if it is not manually booked)."
				},
				"status": {
					"type": "string",
					"example": "sample status",
					"description": "The current state of the payment (paid, upaid, etc.)."
				},
				"stripeTransactionId": {
					"type": "string",
					"example": "1.1",
					"description": "Stripe transaction ID."
				},
				"transactionType": {
					"type": "string",
					"example": "sample transactionType",
					"description": "Type of the transaction: lesson purchase, refund, referral bonus, etc."
				},
				"userId": {
					"type": "string",
					"example": "1.1",
					"description": "ID of the user for whom the lesson was booked"
				},
				"bookerId": {
					"type": "string",
					"example": "sample bookerId",
					"description": "ID of the user of stub user who booked this lesson"
				}
			},
			"description": "An entity representing a single transaction made by a user or  a school."
		},
		"User": {
			"required": [
				"_id",
				"active",
				"deleted",
				"email",
				"languages",
				"name",
				"surname",
				"createdAt",
				"updatedAt"
			],
			"properties": {
				"_id": {
					"type": "string",
					"example": "1",
					"description": ""
				},
				"active": {
					"type": "boolean",
					"example": "false",
					"description": "Says whether the user confirmed the registration. Also becomes inactive upon account deletion request."
				},
				"authentications": {
					"type": "array",
					"description": "A list of available authentication methods (objects) configured for the user.",
					"items": {
						"type": "string",
						"example": "sample auth"
					}
				},
				"createdAt": {
					"type": "string",
					"format": "date",
					"description": "Time the user has been created."
				},
				"updatedAt": {
					"type": "string",
					"format": "date",
					"description": "Time the user has been updated."
				},
				"deleted": {
					"type": "boolean",
					"example": "false",
					"description": "Says whether the user has been deleted. If true - it is scheduled for permanent deletion."
				},
				"email": {
					"type": "string",
					"example": "sample email",
					"description": "The user's email address."
				},
				"languages": {
					"type": "array",
					"description": "The languages this user can speak",
					"items": {
						"type": "string",
						"example": "sample languages"
					}
				},
				"name": {
					"type": "string",
					"example": "sample name",
					"description": "The user's name."
				},
				"phoneNumber": {
					"type": "string",
					"example": "sample phoneNumber",
					"description": "User's contact number."
				},
				"photoURL": {
					"type": "string",
					"example": "sample photoURL",
					"description": "URL of user's avatar."
				},
				"resetPasswordToken": {
					"type": "string",
					"example": "sample resetPasswordToken",
					"description": "A unique, random token dedicated for the specific user view to reset the password."
				},
				"surname": {
					"type": "string",
					"example": "sample surname",
					"description": "The user's surname."
				},
				"refferalToken": {
					"type": "string",
					"example": "sample refferalToken",
					"description": "The token assigned to a user when he will try to generate referal links"
				}
			}
		},
		"Address": {
			"properties": {
				"city": {
					"type": "string",
					"example": "sample city"
				},
				"country": {
					"type": "string",
					"example": "sample country"
				},
				"street": {
					"type": "string",
					"example": "sample street"
				},
				"streetNum": {
					"type": "integer",
					"format": "int32",
					"example": "1"
				},
				"zipcode": {
					"type": "string",
					"example": "sample zipcode"
				},
				"state": {
					"type": "string",
					"example": "sample state"
				}
			},
			"description": "Internal object of a School entity."
		},


		"BankDetails": {
			"required": [
				"accountNumber",
				"currency"
			],
			"properties": {
				"accountNumber": {
					"type": "string",
					"example": "1",
					"description": "Bank account number."
				},
				"currency": {
					"type": "string",
					"example": "sample currency",
					"description": "Currency the account number is in."
				}
			},
			"description": "This will be an internal object of an entity of type School."
		},
		"Discount": {
			"required": [
				"type",
				"value"
			],
			"properties": {
				"type": {
					"type": "string",
					"example": "1.1",
					"description": "Enum representing the discount type - flatPerLesson / flatTotal / percentage"
				},
				"value": {
					"type": "number",
					"format": "double",
					"example": "1.1",
					"description": "Numerical value of the discount"
				}
			},
			"description": "Object representing fields needed for different types of discounts."
		},

		"EntityID": {
			"required": [
				"entity",
				"entityId"
			],
			"properties": {
				"entityId": {
					"type": "string",
					"example": "sample entityId",
					"description": "ID of the object selected by `entity` field"
				},
				"entity": {
					"type": "string",
					"example": "sample entity",
					"description": "Selects an entity type: school, employee, user, lesson, bundle"
				}
			},
			"description": "Helper object defining an entity type"
		},
		"Geo": {
			"required": [
				"lat",
				"lng"
			],
			"properties": {
				"lat": {
					"type": "number",
					"format": "double",
					"example": "1.1"
				},
				"lng": {
					"type": "number",
					"format": "double",
					"example": "1.1"
				}
			},
			"description": "Internal coordinate object used for meeting points."
		},


		"MeetingPoint": {
			"required": [
				"geo",
				"name"
			],
			"properties": {
				"geo": {
					"description": "Coordinates of the meeting point.",
					"$ref": "#/definitions/Geo"
				},
				"name": {
					"type": "string",
					"example": "sample Name",
					"description": "Name of the meeting point."
				}
			},
			"description": "Default meeting point for a lesson"
		},

		"Specialty": {
			"required": [
				"specialtyType",
				"expertise"
			],
			"properties": {
				"specialtyType": {
					"type": "string",
					"example": "sample type",
					"description": "Type of the specialty - ski, snowboard etc."
				},
				"expertise": {
					"type": "string",
					"example": "sample expertise",
					"description": "Expertises the instr can teach."
				},
				"level": {
					"type": "string",
					"example": "sample level",
					"description": "Level the instr can teach."
				}
			},
			"description": "An entity representing an instructor specialty."
		},
		"Schedule": {
			"required": [
				"weekdays",
				"startTimes",
				"startDate",
				"endDate"
			],
			"properties": {
				"weekdays": {
					"type": "string",
					"description": "weekdays where schedule's applicable",
					"items": {
						"type": "integer",
						"format": "int32",
						"example": "1"
					}
				},
				"startTimes": {
					"type": "string",
					"description": "start times",
					"items": {
						"type": "string",
						"example": "sample start times"
					}
				},
				"startDate": {
					"type": "string",
					"format": "date",
					"example": "sample startdate",
					"description": "Start date."
				},
				"endDate": {
					"type": "string",
					"format": "date",
					"example": "sample enddate",
					"description": "End date."
				}
			},
			"description": "An entity representing a schedule."
		},

		"TimeInterval": {
			"required": [
				"timeFrom",
				"timeTo"
			],
			"properties": {
				"timeFrom": {
					"type": "string",
					"format": "date"
				},
				"timeTo": {
					"type": "string",
					"format": "date"
				}
			},
			"description": "An entity representing a pair of times - starting and ending."
		}
	}
}